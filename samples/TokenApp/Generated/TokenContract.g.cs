// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.MultiToken {

  /// <summary>Holder for reflection information generated from token_contract.proto</summary>
  public static partial class TokenContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0b2tlbl9jb250cmFjdC5wcm90bxIFdG9rZW4aD2FlbGYvY29yZS5wcm90",
            "bxoSYWVsZi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHku",
            "cHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLvAQoJVG9r",
            "ZW5JbmZvEg4KBnN5bWJvbBgBIAEoCRISCgp0b2tlbl9uYW1lGAIgASgJEg4K",
            "BnN1cHBseRgDIAEoAxIUCgx0b3RhbF9zdXBwbHkYBCABKAMSEAoIZGVjaW1h",
            "bHMYBSABKAUSHQoGaXNzdWVyGAYgASgLMg0uYWVsZi5BZGRyZXNzEhMKC2lz",
            "X2J1cm5hYmxlGAcgASgIEhYKDmlzc3VlX2NoYWluX2lkGAggASgFEg4KBmlz",
            "c3VlZBgJIAEoAxIqCg1leHRlcm5hbF9pbmZvGAogASgLMhMudG9rZW4uRXh0",
            "ZXJuYWxJbmZvImsKDEV4dGVybmFsSW5mbxItCgV2YWx1ZRgBIAMoCzIeLnRv",
            "a2VuLkV4dGVybmFsSW5mby5WYWx1ZUVudHJ5GiwKClZhbHVlRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL5AQoLQ3JlYXRlSW5wdXQS",
            "DgoGc3ltYm9sGAEgASgJEhIKCnRva2VuX25hbWUYAiABKAkSFAoMdG90YWxf",
            "c3VwcGx5GAMgASgDEhAKCGRlY2ltYWxzGAQgASgFEh0KBmlzc3VlchgFIAEo",
            "CzINLmFlbGYuQWRkcmVzcxITCgtpc19idXJuYWJsZRgGIAEoCBImCg9sb2Nr",
            "X3doaXRlX2xpc3QYByADKAsyDS5hZWxmLkFkZHJlc3MSFgoOaXNzdWVfY2hh",
            "aW5faWQYCCABKAUSKgoNZXh0ZXJuYWxfaW5mbxgJIAEoCzITLnRva2VuLkV4",
            "dGVybmFsSW5mbyIsChpTZXRQcmltYXJ5VG9rZW5TeW1ib2xJbnB1dBIOCgZz",
            "eW1ib2wYASABKAkiVQoKSXNzdWVJbnB1dBIOCgZzeW1ib2wYASABKAkSDgoG",
            "YW1vdW50GAIgASgDEgwKBG1lbW8YAyABKAkSGQoCdG8YBCABKAsyDS5hZWxm",
            "LkFkZHJlc3MiWAoNVHJhbnNmZXJJbnB1dBIZCgJ0bxgBIAEoCzINLmFlbGYu",
            "QWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSDgoGYW1vdW50GAMgASgDEgwKBG1l",
            "bW8YBCABKAkidwoJTG9ja0lucHV0Eh4KB2FkZHJlc3MYASABKAsyDS5hZWxm",
            "LkFkZHJlc3MSGwoHbG9ja19pZBgCIAEoCzIKLmFlbGYuSGFzaBIOCgZzeW1i",
            "b2wYAyABKAkSDQoFdXNhZ2UYBCABKAkSDgoGYW1vdW50GAUgASgDInkKC1Vu",
            "bG9ja0lucHV0Eh4KB2FkZHJlc3MYASABKAsyDS5hZWxmLkFkZHJlc3MSGwoH",
            "bG9ja19pZBgCIAEoCzIKLmFlbGYuSGFzaBIOCgZzeW1ib2wYAyABKAkSDQoF",
            "dXNhZ2UYBCABKAkSDgoGYW1vdW50GAUgASgDInkKEVRyYW5zZmVyRnJvbUlu",
            "cHV0EhsKBGZyb20YASABKAsyDS5hZWxmLkFkZHJlc3MSGQoCdG8YAiABKAsy",
            "DS5hZWxmLkFkZHJlc3MSDgoGc3ltYm9sGAMgASgJEg4KBmFtb3VudBgEIAEo",
            "AxIMCgRtZW1vGAUgASgJIk4KDEFwcHJvdmVJbnB1dBIeCgdzcGVuZGVyGAEg",
            "ASgLMg0uYWVsZi5BZGRyZXNzEg4KBnN5bWJvbBgCIAEoCRIOCgZhbW91bnQY",
            "AyABKAMiUAoOVW5BcHByb3ZlSW5wdXQSHgoHc3BlbmRlchgBIAEoCzINLmFl",
            "bGYuQWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSDgoGYW1vdW50GAMgASgDIisK",
            "CUJ1cm5JbnB1dBIOCgZzeW1ib2wYASABKAkSDgoGYW1vdW50GAIgASgDIqkB",
            "ChhDaGFyZ2VSZXNvdXJjZVRva2VuSW5wdXQSPgoIY29zdF9kaWMYASADKAsy",
            "LC50b2tlbi5DaGFyZ2VSZXNvdXJjZVRva2VuSW5wdXQuQ29zdERpY0VudHJ5",
            "Eh0KBmNhbGxlchgCIAEoCzINLmFlbGYuQWRkcmVzcxouCgxDb3N0RGljRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ASJ+ChJUcmFuc2Fj",
            "dGlvbkZlZUJpbGwSOAoIZmVlc19tYXAYASADKAsyJi50b2tlbi5UcmFuc2Fj",
            "dGlvbkZlZUJpbGwuRmVlc01hcEVudHJ5Gi4KDEZlZXNNYXBFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIsEBCh9UcmFuc2FjdGlvbkZy",
            "ZWVGZWVBbGxvd2FuY2VCaWxsEmEKF2ZyZWVfZmVlX2FsbG93YW5jZXNfbWFw",
            "GAEgAygLMkAudG9rZW4uVHJhbnNhY3Rpb25GcmVlRmVlQWxsb3dhbmNlQmls",
            "bC5GcmVlRmVlQWxsb3dhbmNlc01hcEVudHJ5GjsKGUZyZWVGZWVBbGxvd2Fu",
            "Y2VzTWFwRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ASLa",
            "AQoTQ2hlY2tUaHJlc2hvbGRJbnB1dBIdCgZzZW5kZXIYASABKAsyDS5hZWxm",
            "LkFkZHJlc3MSTgoTc3ltYm9sX3RvX3RocmVzaG9sZBgCIAMoCzIxLnRva2Vu",
            "LkNoZWNrVGhyZXNob2xkSW5wdXQuU3ltYm9sVG9UaHJlc2hvbGRFbnRyeRIa",
            "ChJpc19jaGVja19hbGxvd2FuY2UYAyABKAgaOAoWU3ltYm9sVG9UaHJlc2hv",
            "bGRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIiMKEUdl",
            "dFRva2VuSW5mb0lucHV0Eg4KBnN5bWJvbBgBIAEoCSI/Cg9HZXRCYWxhbmNl",
            "SW5wdXQSDgoGc3ltYm9sGAEgASgJEhwKBW93bmVyGAIgASgLMg0uYWVsZi5B",
            "ZGRyZXNzIlEKEEdldEJhbGFuY2VPdXRwdXQSDgoGc3ltYm9sGAEgASgJEhwK",
            "BW93bmVyGAIgASgLMg0uYWVsZi5BZGRyZXNzEg8KB2JhbGFuY2UYAyABKAMi",
            "YQoRR2V0QWxsb3dhbmNlSW5wdXQSDgoGc3ltYm9sGAEgASgJEhwKBW93bmVy",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzEh4KB3NwZW5kZXIYAyABKAsyDS5hZWxm",
            "LkFkZHJlc3MidQoSR2V0QWxsb3dhbmNlT3V0cHV0Eg4KBnN5bWJvbBgBIAEo",
            "CRIcCgVvd25lchgCIAEoCzINLmFlbGYuQWRkcmVzcxIeCgdzcGVuZGVyGAMg",
            "ASgLMg0uYWVsZi5BZGRyZXNzEhEKCWFsbG93YW5jZRgEIAEoAyKPAQoXQ3Jv",
            "c3NDaGFpblRyYW5zZmVySW5wdXQSGQoCdG8YASABKAsyDS5hZWxmLkFkZHJl",
            "c3MSDgoGc3ltYm9sGAIgASgJEg4KBmFtb3VudBgDIAEoAxIMCgRtZW1vGAQg",
            "ASgJEhMKC3RvX2NoYWluX2lkGAUgASgFEhYKDmlzc3VlX2NoYWluX2lkGAYg",
            "ASgFIpwBChtDcm9zc0NoYWluUmVjZWl2ZVRva2VuSW5wdXQSFQoNZnJvbV9j",
            "aGFpbl9pZBgBIAEoBRIbChNwYXJlbnRfY2hhaW5faGVpZ2h0GAIgASgDEiIK",
            "GnRyYW5zZmVyX3RyYW5zYWN0aW9uX2J5dGVzGAMgASgMEiUKC21lcmtsZV9w",
            "YXRoGAQgASgLMhAuYWVsZi5NZXJrbGVQYXRoIkQKEklzSW5XaGl0ZUxpc3RJ",
            "bnB1dBIOCgZzeW1ib2wYASABKAkSHgoHYWRkcmVzcxgCIAEoCzINLmFlbGYu",
            "QWRkcmVzcyJjChRTeW1ib2xUb1BheVR4U2l6ZUZlZRIUCgx0b2tlbl9zeW1i",
            "b2wYASABKAkSGQoRYmFzZV90b2tlbl93ZWlnaHQYAiABKAUSGgoSYWRkZWRf",
            "dG9rZW5fd2VpZ2h0GAMgASgFIlsKGFN5bWJvbExpc3RUb1BheVR4U2l6ZUZl",
            "ZRI/ChpzeW1ib2xzX3RvX3BheV90eF9zaXplX2ZlZRgBIAMoCzIbLnRva2Vu",
            "LlN5bWJvbFRvUGF5VHhTaXplRmVlIrkBChpDaGFyZ2VUcmFuc2FjdGlvbkZl",
            "ZXNJbnB1dBITCgttZXRob2RfbmFtZRgBIAEoCRInChBjb250cmFjdF9hZGRy",
            "ZXNzGAIgASgLMg0uYWVsZi5BZGRyZXNzEhwKFHRyYW5zYWN0aW9uX3NpemVf",
            "ZmVlGAMgASgDEj8KGnN5bWJvbHNfdG9fcGF5X3R4X3NpemVfZmVlGAQgAygL",
            "MhsudG9rZW4uU3ltYm9sVG9QYXlUeFNpemVGZWUiTAobQ2hhcmdlVHJhbnNh",
            "Y3Rpb25GZWVzT3V0cHV0Eg8KB3N1Y2Nlc3MYASABKAgSHAoUY2hhcmdpbmdf",
            "aW5mb3JtYXRpb24YAiABKAkiTAoMQ2FsbGJhY2tJbmZvEicKEGNvbnRyYWN0",
            "X2FkZHJlc3MYASABKAsyDS5hZWxmLkFkZHJlc3MSEwoLbWV0aG9kX25hbWUY",
            "AiABKAkiZwoWRXh0cmFUb2tlbkxpc3RNb2RpZmllZBJHCh5zeW1ib2xfbGlz",
            "dF90b19wYXlfdHhfc2l6ZV9mZWUYASABKAsyHy50b2tlbi5TeW1ib2xMaXN0",
            "VG9QYXlUeFNpemVGZWU6BKC7GAEiYwoUR2V0TG9ja2VkQW1vdW50SW5wdXQS",
            "HgoHYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZzeW1ib2wYAiAB",
            "KAkSGwoHbG9ja19pZBgDIAEoCzIKLmFlbGYuSGFzaCJ0ChVHZXRMb2NrZWRB",
            "bW91bnRPdXRwdXQSHgoHYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcxIO",
            "CgZzeW1ib2wYAiABKAkSGwoHbG9ja19pZBgDIAEoCzIKLmFlbGYuSGFzaBIO",
            "CgZhbW91bnQYBCABKAMiMAoNVG9rZW5JbmZvTGlzdBIfCgV2YWx1ZRgBIAMo",
            "CzIQLnRva2VuLlRva2VuSW5mbyJBCi5HZXRDcm9zc0NoYWluVHJhbnNmZXJU",
            "b2tlbkNvbnRyYWN0QWRkcmVzc0lucHV0Eg8KB2NoYWluSWQYASABKAUikgEK",
            "GkNyb3NzQ2hhaW5DcmVhdGVUb2tlbklucHV0EhUKDWZyb21fY2hhaW5faWQY",
            "ASABKAUSGwoTcGFyZW50X2NoYWluX2hlaWdodBgCIAEoAxIZChF0cmFuc2Fj",
            "dGlvbl9ieXRlcxgDIAEoDBIlCgttZXJrbGVfcGF0aBgEIAEoCzIQLmFlbGYu",
            "TWVya2xlUGF0aCKuAwoeSW5pdGlhbGl6ZUZyb21QYXJlbnRDaGFpbklucHV0",
            "ElIKD3Jlc291cmNlX2Ftb3VudBgBIAMoCzI5LnRva2VuLkluaXRpYWxpemVG",
            "cm9tUGFyZW50Q2hhaW5JbnB1dC5SZXNvdXJjZUFtb3VudEVudHJ5EoMBCily",
            "ZWdpc3RlcmVkX290aGVyX3Rva2VuX2NvbnRyYWN0X2FkZHJlc3NlcxgCIAMo",
            "CzJQLnRva2VuLkluaXRpYWxpemVGcm9tUGFyZW50Q2hhaW5JbnB1dC5SZWdp",
            "c3RlcmVkT3RoZXJUb2tlbkNvbnRyYWN0QWRkcmVzc2VzRW50cnkSHgoHY3Jl",
            "YXRvchgDIAEoCzINLmFlbGYuQWRkcmVzcxo1ChNSZXNvdXJjZUFtb3VudEVu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoBToCOAEaWwoqUmVnaXN0",
            "ZXJlZE90aGVyVG9rZW5Db250cmFjdEFkZHJlc3Nlc0VudHJ5EgsKA2tleRgB",
            "IAEoBRIcCgV2YWx1ZRgCIAEoCzINLmFlbGYuQWRkcmVzczoCOAEiZwoXVXBk",
            "YXRlQ29lZmZpY2llbnRzSW5wdXQSFQoNcGllY2VfbnVtYmVycxgBIAMoBRI1",
            "Cgxjb2VmZmljaWVudHMYAiABKAsyHy50b2tlbi5DYWxjdWxhdGVGZWVDb2Vm",
            "ZmljaWVudHMiLgodQ2FsY3VsYXRlRmVlUGllY2VDb2VmZmljaWVudHMSDQoF",
            "dmFsdWUYASADKAUieQoYQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRzEhYKDmZl",
            "ZV90b2tlbl90eXBlGAEgASgFEkUKF3BpZWNlX2NvZWZmaWNpZW50c19saXN0",
            "GAIgAygLMiQudG9rZW4uQ2FsY3VsYXRlRmVlUGllY2VDb2VmZmljaWVudHMi",
            "TQobQWxsQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRzEi4KBXZhbHVlGAEgAygL",
            "Mh8udG9rZW4uQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRzIrcBChdUb3RhbFRy",
            "YW5zYWN0aW9uRmVlc01hcBI4CgV2YWx1ZRgBIAMoCzIpLnRva2VuLlRvdGFs",
            "VHJhbnNhY3Rpb25GZWVzTWFwLlZhbHVlRW50cnkSHgoKYmxvY2tfaGFzaBgC",
            "IAEoCzIKLmFlbGYuSGFzaBIUCgxibG9ja19oZWlnaHQYAyABKAMaLAoKVmFs",
            "dWVFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIoIBChdU",
            "b3RhbFJlc291cmNlVG9rZW5zTWFwcxIxCgV2YWx1ZRgBIAMoCzIiLnRva2Vu",
            "LkNvbnRyYWN0VG90YWxSZXNvdXJjZVRva2VucxIeCgpibG9ja19oYXNoGAIg",
            "ASgLMgouYWVsZi5IYXNoEhQKDGJsb2NrX2hlaWdodBgDIAEoAyJ5ChtDb250",
            "cmFjdFRvdGFsUmVzb3VyY2VUb2tlbnMSJwoQY29udHJhY3RfYWRkcmVzcxgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcxIxCgp0b2tlbnNfbWFwGAIgASgLMh0udG9r",
            "ZW4uVG90YWxSZXNvdXJjZVRva2Vuc01hcCJ/ChZUb3RhbFJlc291cmNlVG9r",
            "ZW5zTWFwEjcKBXZhbHVlGAEgAygLMigudG9rZW4uVG90YWxSZXNvdXJjZVRv",
            "a2Vuc01hcC5WYWx1ZUVudHJ5GiwKClZhbHVlRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgDOgI4ASJRChZDaGFuZ2VUb2tlbklzc3VlcklucHV0",
            "Eg4KBnN5bWJvbBgBIAEoCRInChBuZXdfdG9rZW5fSXNzdWVyGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzIlQKFlJlc2V0RXh0ZXJuYWxJbmZvSW5wdXQSDgoGc3lt",
            "Ym9sGAEgASgJEioKDWV4dGVybmFsX2luZm8YAiABKAsyEy50b2tlbi5FeHRl",
            "cm5hbEluZm8iGwoKU3RyaW5nTGlzdBINCgV2YWx1ZRgBIAMoCSKEAQodTWV0",
            "aG9kRmVlRnJlZUFsbG93YW5jZXNDb25maWcSNwoPZnJlZV9hbGxvd2FuY2Vz",
            "GAEgASgLMh4udG9rZW4uTWV0aG9kRmVlRnJlZUFsbG93YW5jZXMSFwoPcmVm",
            "cmVzaF9zZWNvbmRzGAIgASgDEhEKCXRocmVzaG9sZBgDIAEoAyJHChdNZXRo",
            "b2RGZWVGcmVlQWxsb3dhbmNlcxIsCgV2YWx1ZRgBIAMoCzIdLnRva2VuLk1l",
            "dGhvZEZlZUZyZWVBbGxvd2FuY2UiOAoWTWV0aG9kRmVlRnJlZUFsbG93YW5j",
            "ZRIOCgZzeW1ib2wYASABKAkSDgoGYW1vdW50GAIgASgDIq0BChlUcmFuc2Fj",
            "dGlvbkZlZURlbGVnYXRpb25zEkYKC2RlbGVnYXRpb25zGAEgAygLMjEudG9r",
            "ZW4uVHJhbnNhY3Rpb25GZWVEZWxlZ2F0aW9ucy5EZWxlZ2F0aW9uc0VudHJ5",
            "EhQKDGJsb2NrX2hlaWdodBgCIAEoAxoyChBEZWxlZ2F0aW9uc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEitAEKGFRyYW5zYWN0aW9u",
            "RmVlRGVsZWdhdGVlcxJDCgpkZWxlZ2F0ZWVzGAEgAygLMi8udG9rZW4uVHJh",
            "bnNhY3Rpb25GZWVEZWxlZ2F0ZWVzLkRlbGVnYXRlZXNFbnRyeRpTCg9EZWxl",
            "Z2F0ZWVzRW50cnkSCwoDa2V5GAEgASgJEi8KBXZhbHVlGAIgASgLMiAudG9r",
            "ZW4uVHJhbnNhY3Rpb25GZWVEZWxlZ2F0aW9uczoCOAEi0QEKIVNldFRyYW5z",
            "YWN0aW9uRmVlRGVsZWdhdGlvbnNJbnB1dBIoChFkZWxlZ2F0b3JfYWRkcmVz",
            "cxgBIAEoCzINLmFlbGYuQWRkcmVzcxJOCgtkZWxlZ2F0aW9ucxgCIAMoCzI5",
            "LnRva2VuLlNldFRyYW5zYWN0aW9uRmVlRGVsZWdhdGlvbnNJbnB1dC5EZWxl",
            "Z2F0aW9uc0VudHJ5GjIKEERlbGVnYXRpb25zRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgDOgI4ASI1CiJTZXRUcmFuc2FjdGlvbkZlZURlbGVn",
            "YXRpb25zT3V0cHV0Eg8KB3N1Y2Nlc3MYASABKAgiTgoiUmVtb3ZlVHJhbnNh",
            "Y3Rpb25GZWVEZWxlZ2F0b3JJbnB1dBIoChFkZWxlZ2F0b3JfYWRkcmVzcxgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcyJOCiJSZW1vdmVUcmFuc2FjdGlvbkZlZURl",
            "bGVnYXRlZUlucHV0EigKEWRlbGVnYXRlZV9hZGRyZXNzGAEgASgLMg0uYWVs",
            "Zi5BZGRyZXNzIoMBCi1HZXRUcmFuc2FjdGlvbkZlZURlbGVnYXRpb25zT2ZB",
            "RGVsZWdhdGVlSW5wdXQSKAoRZGVsZWdhdGVlX2FkZHJlc3MYASABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSKAoRZGVsZWdhdG9yX2FkZHJlc3MYAiABKAsyDS5hZWxm",
            "LkFkZHJlc3MijgEKC1RyYW5zZmVycmVkEiIKBGZyb20YASABKAsyDS5hZWxm",
            "LkFkZHJlc3NCBYiP9QEBEiAKAnRvGAIgASgLMg0uYWVsZi5BZGRyZXNzQgWI",
            "j/UBARIVCgZzeW1ib2wYAyABKAlCBYiP9QEBEg4KBmFtb3VudBgEIAEoAxIM",
            "CgRtZW1vGAUgASgJOgSguxgBIoMBCghBcHByb3ZlZBIjCgVvd25lchgBIAEo",
            "CzINLmFlbGYuQWRkcmVzc0IFiI/1AQESJQoHc3BlbmRlchgCIAEoCzINLmFl",
            "bGYuQWRkcmVzc0IFiI/1AQESFQoGc3ltYm9sGAMgASgJQgWIj/UBARIOCgZh",
            "bW91bnQYBCABKAM6BKC7GAEihQEKClVuQXBwcm92ZWQSIwoFb3duZXIYASAB",
            "KAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEBEiUKB3NwZW5kZXIYAiABKAsyDS5h",
            "ZWxmLkFkZHJlc3NCBYiP9QEBEhUKBnN5bWJvbBgDIAEoCUIFiI/1AQESDgoG",
            "YW1vdW50GAQgASgDOgSguxgBIlsKBkJ1cm5lZBIkCgZidXJuZXIYASABKAsy",
            "DS5hZWxmLkFkZHJlc3NCBYiP9QEBEhUKBnN5bWJvbBgCIAEoCUIFiI/1AQES",
            "DgoGYW1vdW50GAMgASgDOgSguxgBIjgKGkNoYWluUHJpbWFyeVRva2VuU3lt",
            "Ym9sU2V0EhQKDHRva2VuX3N5bWJvbBgBIAEoCToEoLsYASJrChxDYWxjdWxh",
            "dGVGZWVBbGdvcml0aG1VcGRhdGVkEkUKGWFsbF90eXBlX2ZlZV9jb2VmZmlj",
            "aWVudHMYASABKAsyIi50b2tlbi5BbGxDYWxjdWxhdGVGZWVDb2VmZmljaWVu",
            "dHM6BKC7GAEiNQoNUmVudGFsQ2hhcmdlZBIOCgZzeW1ib2wYASABKAkSDgoG",
            "YW1vdW50GAIgASgDOgSguxgBIkgKIFJlbnRhbEFjY291bnRCYWxhbmNlSW5z",
            "dWZmaWNpZW50Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQYAiABKAM6BKC7",
            "GAEi2AEKDFRva2VuQ3JlYXRlZBIOCgZzeW1ib2wYASABKAkSEgoKdG9rZW5f",
            "bmFtZRgCIAEoCRIUCgx0b3RhbF9zdXBwbHkYAyABKAMSEAoIZGVjaW1hbHMY",
            "BCABKAUSHQoGaXNzdWVyGAUgASgLMg0uYWVsZi5BZGRyZXNzEhMKC2lzX2J1",
            "cm5hYmxlGAYgASgIEhYKDmlzc3VlX2NoYWluX2lkGAcgASgFEioKDWV4dGVy",
            "bmFsX2luZm8YCCABKAsyEy50b2tlbi5FeHRlcm5hbEluZm86BKC7GAEiVwoG",
            "SXNzdWVkEg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQYAiABKAMSDAoEbWVt",
            "bxgDIAEoCRIZCgJ0bxgEIAEoCzINLmFlbGYuQWRkcmVzczoEoLsYASKwAQoV",
            "Q3Jvc3NDaGFpblRyYW5zZmVycmVkEhsKBGZyb20YASABKAsyDS5hZWxmLkFk",
            "ZHJlc3MSGQoCdG8YAiABKAsyDS5hZWxmLkFkZHJlc3MSDgoGc3ltYm9sGAMg",
            "ASgJEg4KBmFtb3VudBgEIAEoAxIMCgRtZW1vGAUgASgJEhMKC3RvX2NoYWlu",
            "X2lkGAYgASgFEhYKDmlzc3VlX2NoYWluX2lkGAcgASgFOgSguxgBIswBChJD",
            "cm9zc0NoYWluUmVjZWl2ZWQSGwoEZnJvbRgBIAEoCzINLmFlbGYuQWRkcmVz",
            "cxIZCgJ0bxgCIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZzeW1ib2wYAyABKAkS",
            "DgoGYW1vdW50GAQgASgDEgwKBG1lbW8YBSABKAkSFQoNZnJvbV9jaGFpbl9p",
            "ZBgGIAEoBRIWCg5pc3N1ZV9jaGFpbl9pZBgHIAEoBRIbChNwYXJlbnRfY2hh",
            "aW5faGVpZ2h0GAggASgDOgSguxgBIlcKE0V4dGVybmFsSW5mb0NoYW5nZWQS",
            "DgoGc3ltYm9sGAEgASgJEioKDWV4dGVybmFsX2luZm8YAiABKAsyEy50b2tl",
            "bi5FeHRlcm5hbEluZm86BKC7GAEinQEKHVRyYW5zYWN0aW9uRmVlRGVsZWdh",
            "dGlvbkFkZGVkEicKCWRlbGVnYXRvchgBIAEoCzINLmFlbGYuQWRkcmVzc0IF",
            "iI/1AQESJwoJZGVsZWdhdGVlGAIgASgLMg0uYWVsZi5BZGRyZXNzQgWIj/UB",
            "ARIkCgZjYWxsZXIYAyABKAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEBOgSguxgB",
            "IqEBCiFUcmFuc2FjdGlvbkZlZURlbGVnYXRpb25DYW5jZWxsZWQSJwoJZGVs",
            "ZWdhdG9yGAEgASgLMg0uYWVsZi5BZGRyZXNzQgWIj/UBARInCglkZWxlZ2F0",
            "ZWUYAiABKAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEBEiQKBmNhbGxlchgDIAEo",
            "CzINLmFlbGYuQWRkcmVzc0IFiI/1AQE6BKC7GAEqRAoLRmVlVHlwZUVudW0S",
            "CAoEUkVBRBAAEgsKB1NUT1JBR0UQARIJCgVXUklURRACEgsKB1RSQUZGSUMQ",
            "AxIGCgJUWBAEMrciCg1Ub2tlbkNvbnRyYWN0EjYKBkNyZWF0ZRISLnRva2Vu",
            "LkNyZWF0ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNAoFSXNz",
            "dWUSES50b2tlbi5Jc3N1ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASOgoIVHJhbnNmZXISFC50b2tlbi5UcmFuc2ZlcklucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASQgoMVHJhbnNmZXJGcm9tEhgudG9rZW4uVHJh",
            "bnNmZXJGcm9tSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI4CgdB",
            "cHByb3ZlEhMudG9rZW4uQXBwcm92ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASPAoJVW5BcHByb3ZlEhUudG9rZW4uVW5BcHByb3ZlSW5wdXQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIyCgRMb2NrEhAudG9rZW4uTG9j",
            "a0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNgoGVW5sb2NrEhIu",
            "dG9rZW4uVW5sb2NrSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIy",
            "CgRCdXJuEhAudG9rZW4uQnVybklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASTAoRQ2hhbmdlVG9rZW5Jc3N1ZXISHS50b2tlbi5DaGFuZ2VUb2tl",
            "bklzc3VlcklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASVAoVU2V0",
            "UHJpbWFyeVRva2VuU3ltYm9sEiEudG9rZW4uU2V0UHJpbWFyeVRva2VuU3lt",
            "Ym9sSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJOChJDcm9zc0No",
            "YWluVHJhbnNmZXISHi50b2tlbi5Dcm9zc0NoYWluVHJhbnNmZXJJbnB1dBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElYKFkNyb3NzQ2hhaW5SZWNlaXZl",
            "VG9rZW4SIi50b2tlbi5Dcm9zc0NoYWluUmVjZWl2ZVRva2VuSW5wdXQaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABJUChVDcm9zc0NoYWluQ3JlYXRlVG9r",
            "ZW4SIS50b2tlbi5Dcm9zc0NoYWluQ3JlYXRlVG9rZW5JbnB1dBoWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eSIAElwKGUluaXRpYWxpemVGcm9tUGFyZW50Q2hh",
            "aW4SJS50b2tlbi5Jbml0aWFsaXplRnJvbVBhcmVudENoYWluSW5wdXQaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABJQChRDbGFpbVRyYW5zYWN0aW9uRmVl",
            "cxIeLnRva2VuLlRvdGFsVHJhbnNhY3Rpb25GZWVzTWFwGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASYAoVQ2hhcmdlVHJhbnNhY3Rpb25GZWVzEiEudG9r",
            "ZW4uQ2hhcmdlVHJhbnNhY3Rpb25GZWVzSW5wdXQaIi50b2tlbi5DaGFyZ2VU",
            "cmFuc2FjdGlvbkZlZXNPdXRwdXQiABJGCg5DaGVja1RocmVzaG9sZBIaLnRv",
            "a2VuLkNoZWNrVGhyZXNob2xkSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJHChNJbml0aWFsQ29lZmZpY2llbnRzEhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASTwoTRG9uYXRlUmVz",
            "b3VyY2VUb2tlbhIeLnRva2VuLlRvdGFsUmVzb3VyY2VUb2tlbnNNYXBzGhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASUAoTQ2hhcmdlUmVzb3VyY2VUb2tl",
            "bhIfLnRva2VuLkNoYXJnZVJlc291cmNlVG9rZW5JbnB1dBoWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eSIAEkYKEkNoZWNrUmVzb3VyY2VUb2tlbhIWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElUK",
            "GFNldFN5bWJvbHNUb1BheVR4U2l6ZUZlZRIfLnRva2VuLlN5bWJvbExpc3RU",
            "b1BheVR4U2l6ZUZlZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElcKG1Vw",
            "ZGF0ZUNvZWZmaWNpZW50c0ZvclNlbmRlchIeLnRva2VuLlVwZGF0ZUNvZWZm",
            "aWNpZW50c0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASWQodVXBk",
            "YXRlQ29lZmZpY2llbnRzRm9yQ29udHJhY3QSHi50b2tlbi5VcGRhdGVDb2Vm",
            "ZmljaWVudHNJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElIKHklu",
            "aXRpYWxpemVBdXRob3JpemVkQ29udHJvbGxlchIWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkwKEVJlc2V0RXh0",
            "ZXJuYWxJbmZvEh0udG9rZW4uUmVzZXRFeHRlcm5hbEluZm9JbnB1dBoWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eSIAEksKIEFkZEFkZHJlc3NUb0NyZWF0ZVRv",
            "a2VuV2hpdGVMaXN0Eg0uYWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASUAolUmVtb3ZlQWRkcmVzc0Zyb21DcmVhdGVUb2tlbldoaXRl",
            "TGlzdBINLmFlbGYuQWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "El8KHUNvbmZpZ01ldGhvZEZlZUZyZWVBbGxvd2FuY2VzEiQudG9rZW4uTWV0",
            "aG9kRmVlRnJlZUFsbG93YW5jZXNDb25maWcaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABJ1ChxTZXRUcmFuc2FjdGlvbkZlZURlbGVnYXRpb25zEigudG9r",
            "ZW4uU2V0VHJhbnNhY3Rpb25GZWVEZWxlZ2F0aW9uc0lucHV0GikudG9rZW4u",
            "U2V0VHJhbnNhY3Rpb25GZWVEZWxlZ2F0aW9uc091dHB1dCIAEmQKHVJlbW92",
            "ZVRyYW5zYWN0aW9uRmVlRGVsZWdhdG9yEikudG9rZW4uUmVtb3ZlVHJhbnNh",
            "Y3Rpb25GZWVEZWxlZ2F0b3JJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEmQKHVJlbW92ZVRyYW5zYWN0aW9uRmVlRGVsZWdhdGVlEikudG9rZW4u",
            "UmVtb3ZlVHJhbnNhY3Rpb25GZWVEZWxlZ2F0ZWVJbnB1dBoWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eSIAEkEKDEdldFRva2VuSW5mbxIYLnRva2VuLkdldFRv",
            "a2VuSW5mb0lucHV0GhAudG9rZW4uVG9rZW5JbmZvIgWIifcBARJFChJHZXRO",
            "YXRpdmVUb2tlbkluZm8SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaEC50b2tl",
            "bi5Ub2tlbkluZm8iBYiJ9wEBEksKFEdldFJlc291cmNlVG9rZW5JbmZvEhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5GhQudG9rZW4uVG9rZW5JbmZvTGlzdCIF",
            "iIn3AQESRAoKR2V0QmFsYW5jZRIWLnRva2VuLkdldEJhbGFuY2VJbnB1dBoX",
            "LnRva2VuLkdldEJhbGFuY2VPdXRwdXQiBYiJ9wEBEkoKDEdldEFsbG93YW5j",
            "ZRIYLnRva2VuLkdldEFsbG93YW5jZUlucHV0GhkudG9rZW4uR2V0QWxsb3dh",
            "bmNlT3V0cHV0IgWIifcBARJNCg1Jc0luV2hpdGVMaXN0EhkudG9rZW4uSXNJ",
            "bldoaXRlTGlzdElucHV0GhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSIF",
            "iIn3AQESUwoPR2V0TG9ja2VkQW1vdW50EhsudG9rZW4uR2V0TG9ja2VkQW1v",
            "dW50SW5wdXQaHC50b2tlbi5HZXRMb2NrZWRBbW91bnRPdXRwdXQiBYiJ9wEB",
            "EngKKUdldENyb3NzQ2hhaW5UcmFuc2ZlclRva2VuQ29udHJhY3RBZGRyZXNz",
            "EjUudG9rZW4uR2V0Q3Jvc3NDaGFpblRyYW5zZmVyVG9rZW5Db250cmFjdEFk",
            "ZHJlc3NJbnB1dBoNLmFlbGYuQWRkcmVzcyIFiIn3AQESVAoVR2V0UHJpbWFy",
            "eVRva2VuU3ltYm9sEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlIgWIifcBARJtCiZHZXRDYWxjdWxhdGVG",
            "ZWVDb2VmZmljaWVudHNGb3JDb250cmFjdBIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQzMlZhbHVlGh8udG9rZW4uQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRzIgWI",
            "ifcBARJmCiRHZXRDYWxjdWxhdGVGZWVDb2VmZmljaWVudHNGb3JTZW5kZXIS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaHy50b2tlbi5DYWxjdWxhdGVGZWVD",
            "b2VmZmljaWVudHMiBYiJ9wEBEloKGEdldFN5bWJvbHNUb1BheVR4U2l6ZUZl",
            "ZRIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRofLnRva2VuLlN5bWJvbExpc3RU",
            "b1BheVR4U2l6ZUZlZSIFiIn3AQESUQokR2V0TGF0ZXN0VG90YWxUcmFuc2Fj",
            "dGlvbkZlZXNNYXBIYXNoEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GgouYWVs",
            "Zi5IYXNoIgWIifcBARJRCiRHZXRMYXRlc3RUb3RhbFJlc291cmNlVG9rZW5z",
            "TWFwc0hhc2gSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaCi5hZWxmLkhhc2gi",
            "BYiJ9wEBEl8KHElzVG9rZW5BdmFpbGFibGVGb3JNZXRob2RGZWUSHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUaGi5nb29nbGUucHJvdG9idWYuQm9v",
            "bFZhbHVlIgWIifcBARJMChhJc0luQ3JlYXRlVG9rZW5XaGl0ZUxpc3QSDS5h",
            "ZWxmLkFkZHJlc3MaGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlIgWIifcB",
            "ARJSCh5HZXRSZXNlcnZlZEV4dGVybmFsSW5mb0tleUxpc3QSFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkaES50b2tlbi5TdHJpbmdMaXN0IgWIifcBARJSChpH",
            "ZXRNZXRob2RGZWVGcmVlQWxsb3dhbmNlcxINLmFlbGYuQWRkcmVzcxoeLnRv",
            "a2VuLk1ldGhvZEZlZUZyZWVBbGxvd2FuY2VzIgWIifcBARJnCiBHZXRNZXRo",
            "b2RGZWVGcmVlQWxsb3dhbmNlc0NvbmZpZxIWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eRokLnRva2VuLk1ldGhvZEZlZUZyZWVBbGxvd2FuY2VzQ29uZmlnIgWI",
            "ifcBARKJAQooR2V0VHJhbnNhY3Rpb25GZWVEZWxlZ2F0aW9uc09mQURlbGVn",
            "YXRlZRI0LnRva2VuLkdldFRyYW5zYWN0aW9uRmVlRGVsZWdhdGlvbnNPZkFE",
            "ZWxlZ2F0ZWVJbnB1dBogLnRva2VuLlRyYW5zYWN0aW9uRmVlRGVsZWdhdGlv",
            "bnMiBYiJ9wEBQhyqAhlBRWxmLkNvbnRyYWN0cy5NdWx0aVRva2VuYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Contracts.MultiToken.FeeTypeEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenInfo), global::AElf.Contracts.MultiToken.TokenInfo.Parser, new[]{ "Symbol", "TokenName", "Supply", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IssueChainId", "Issued", "ExternalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ExternalInfo), global::AElf.Contracts.MultiToken.ExternalInfo.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CreateInput), global::AElf.Contracts.MultiToken.CreateInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteList", "IssueChainId", "ExternalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput), global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.IssueInput), global::AElf.Contracts.MultiToken.IssueInput.Parser, new[]{ "Symbol", "Amount", "Memo", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferInput), global::AElf.Contracts.MultiToken.TransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.LockInput), global::AElf.Contracts.MultiToken.LockInput.Parser, new[]{ "Address", "LockId", "Symbol", "Usage", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnlockInput), global::AElf.Contracts.MultiToken.UnlockInput.Parser, new[]{ "Address", "LockId", "Symbol", "Usage", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferFromInput), global::AElf.Contracts.MultiToken.TransferFromInput.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ApproveInput), global::AElf.Contracts.MultiToken.ApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnApproveInput), global::AElf.Contracts.MultiToken.UnApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.BurnInput), global::AElf.Contracts.MultiToken.BurnInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput), global::AElf.Contracts.MultiToken.ChargeResourceTokenInput.Parser, new[]{ "CostDic", "Caller" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeBill), global::AElf.Contracts.MultiToken.TransactionFeeBill.Parser, new[]{ "FeesMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFreeFeeAllowanceBill), global::AElf.Contracts.MultiToken.TransactionFreeFeeAllowanceBill.Parser, new[]{ "FreeFeeAllowancesMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CheckThresholdInput), global::AElf.Contracts.MultiToken.CheckThresholdInput.Parser, new[]{ "Sender", "SymbolToThreshold", "IsCheckAllowance" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetTokenInfoInput), global::AElf.Contracts.MultiToken.GetTokenInfoInput.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetBalanceInput), global::AElf.Contracts.MultiToken.GetBalanceInput.Parser, new[]{ "Symbol", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetBalanceOutput), global::AElf.Contracts.MultiToken.GetBalanceOutput.Parser, new[]{ "Symbol", "Owner", "Balance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetAllowanceInput), global::AElf.Contracts.MultiToken.GetAllowanceInput.Parser, new[]{ "Symbol", "Owner", "Spender" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetAllowanceOutput), global::AElf.Contracts.MultiToken.GetAllowanceOutput.Parser, new[]{ "Symbol", "Owner", "Spender", "Allowance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainTransferInput), global::AElf.Contracts.MultiToken.CrossChainTransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo", "ToChainId", "IssueChainId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput), global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransferTransactionBytes", "MerklePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.IsInWhiteListInput), global::AElf.Contracts.MultiToken.IsInWhiteListInput.Parser, new[]{ "Symbol", "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee), global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee.Parser, new[]{ "TokenSymbol", "BaseTokenWeight", "AddedTokenWeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee), global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee.Parser, new[]{ "SymbolsToPayTxSizeFee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput), global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput.Parser, new[]{ "MethodName", "ContractAddress", "TransactionSizeFee", "SymbolsToPayTxSizeFee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput), global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput.Parser, new[]{ "Success", "ChargingInformation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CallbackInfo), global::AElf.Contracts.MultiToken.CallbackInfo.Parser, new[]{ "ContractAddress", "MethodName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ExtraTokenListModified), global::AElf.Contracts.MultiToken.ExtraTokenListModified.Parser, new[]{ "SymbolListToPayTxSizeFee" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetLockedAmountInput), global::AElf.Contracts.MultiToken.GetLockedAmountInput.Parser, new[]{ "Address", "Symbol", "LockId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetLockedAmountOutput), global::AElf.Contracts.MultiToken.GetLockedAmountOutput.Parser, new[]{ "Address", "Symbol", "LockId", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenInfoList), global::AElf.Contracts.MultiToken.TokenInfoList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput), global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput.Parser, new[]{ "ChainId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput), global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransactionBytes", "MerklePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput), global::AElf.Contracts.MultiToken.InitializeFromParentChainInput.Parser, new[]{ "ResourceAmount", "RegisteredOtherTokenContractAddresses", "Creator" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput), global::AElf.Contracts.MultiToken.UpdateCoefficientsInput.Parser, new[]{ "PieceNumbers", "Coefficients" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients), global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CalculateFeeCoefficients), global::AElf.Contracts.MultiToken.CalculateFeeCoefficients.Parser, new[]{ "FeeTokenType", "PieceCoefficientsList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients), global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap), global::AElf.Contracts.MultiToken.TotalTransactionFeesMap.Parser, new[]{ "Value", "BlockHash", "BlockHeight" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps), global::AElf.Contracts.MultiToken.TotalResourceTokensMaps.Parser, new[]{ "Value", "BlockHash", "BlockHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ContractTotalResourceTokens), global::AElf.Contracts.MultiToken.ContractTotalResourceTokens.Parser, new[]{ "ContractAddress", "TokensMap" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TotalResourceTokensMap), global::AElf.Contracts.MultiToken.TotalResourceTokensMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChangeTokenIssuerInput), global::AElf.Contracts.MultiToken.ChangeTokenIssuerInput.Parser, new[]{ "Symbol", "NewTokenIssuer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ResetExternalInfoInput), global::AElf.Contracts.MultiToken.ResetExternalInfoInput.Parser, new[]{ "Symbol", "ExternalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.StringList), global::AElf.Contracts.MultiToken.StringList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.MethodFeeFreeAllowancesConfig), global::AElf.Contracts.MultiToken.MethodFeeFreeAllowancesConfig.Parser, new[]{ "FreeAllowances", "RefreshSeconds", "Threshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances), global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance), global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance.Parser, new[]{ "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeDelegations), global::AElf.Contracts.MultiToken.TransactionFeeDelegations.Parser, new[]{ "Delegations", "BlockHeight" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeDelegatees), global::AElf.Contracts.MultiToken.TransactionFeeDelegatees.Parser, new[]{ "Delegatees" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput), global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput.Parser, new[]{ "DelegatorAddress", "Delegations" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput), global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput.Parser, new[]{ "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput), global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput.Parser, new[]{ "DelegatorAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput), global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput.Parser, new[]{ "DelegateeAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput), global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput.Parser, new[]{ "DelegateeAddress", "DelegatorAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Transferred), global::AElf.Contracts.MultiToken.Transferred.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Approved), global::AElf.Contracts.MultiToken.Approved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnApproved), global::AElf.Contracts.MultiToken.UnApproved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Burned), global::AElf.Contracts.MultiToken.Burned.Parser, new[]{ "Burner", "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChainPrimaryTokenSymbolSet), global::AElf.Contracts.MultiToken.ChainPrimaryTokenSymbolSet.Parser, new[]{ "TokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CalculateFeeAlgorithmUpdated), global::AElf.Contracts.MultiToken.CalculateFeeAlgorithmUpdated.Parser, new[]{ "AllTypeFeeCoefficients" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RentalCharged), global::AElf.Contracts.MultiToken.RentalCharged.Parser, new[]{ "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RentalAccountBalanceInsufficient), global::AElf.Contracts.MultiToken.RentalAccountBalanceInsufficient.Parser, new[]{ "Symbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenCreated), global::AElf.Contracts.MultiToken.TokenCreated.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IssueChainId", "ExternalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Issued), global::AElf.Contracts.MultiToken.Issued.Parser, new[]{ "Symbol", "Amount", "Memo", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainTransferred), global::AElf.Contracts.MultiToken.CrossChainTransferred.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo", "ToChainId", "IssueChainId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainReceived), global::AElf.Contracts.MultiToken.CrossChainReceived.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo", "FromChainId", "IssueChainId", "ParentChainHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ExternalInfoChanged), global::AElf.Contracts.MultiToken.ExternalInfoChanged.Parser, new[]{ "Symbol", "ExternalInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeDelegationAdded), global::AElf.Contracts.MultiToken.TransactionFeeDelegationAdded.Parser, new[]{ "Delegator", "Delegatee", "Caller" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeDelegationCancelled), global::AElf.Contracts.MultiToken.TransactionFeeDelegationCancelled.Parser, new[]{ "Delegator", "Delegatee", "Caller" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FeeTypeEnum {
    [pbr::OriginalName("READ")] Read = 0,
    [pbr::OriginalName("STORAGE")] Storage = 1,
    [pbr::OriginalName("WRITE")] Write = 2,
    [pbr::OriginalName("TRAFFIC")] Traffic = 3,
    [pbr::OriginalName("TX")] Tx = 4,
  }

  #endregion

  #region Messages
  public sealed partial class TokenInfo : pb::IMessage<TokenInfo> {
    private static readonly pb::MessageParser<TokenInfo> _parser = new pb::MessageParser<TokenInfo>(() => new TokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo(TokenInfo other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      supply_ = other.supply_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      issueChainId_ = other.issueChainId_;
      issued_ = other.issued_;
      externalInfo_ = other.externalInfo_ != null ? other.externalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo Clone() {
      return new TokenInfo(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token.f
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    /// <summary>
    /// The full name of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 3;
    private long supply_;
    /// <summary>
    /// The current supply of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Supply {
      get { return supply_; }
      set {
        supply_ = value;
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    /// <summary>
    /// The total supply of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 5;
    private int decimals_;
    /// <summary>
    /// The precision of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 6;
    private global::AElf.Types.Address issuer_;
    /// <summary>
    /// The address that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 7;
    private bool isBurnable_;
    /// <summary>
    /// A flag indicating if this token is burnable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 8;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "issued" field.</summary>
    public const int IssuedFieldNumber = 9;
    private long issued_;
    /// <summary>
    /// The amount of issued tokens.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Issued {
      get { return issued_; }
      set {
        issued_ = value;
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 10;
    private global::AElf.Contracts.MultiToken.ExternalInfo externalInfo_;
    /// <summary>
    /// The external information of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.ExternalInfo ExternalInfo {
      get { return externalInfo_; }
      set {
        externalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (Supply != other.Supply) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (Issued != other.Issued) return false;
      if (!object.Equals(ExternalInfo, other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (Supply != 0L) hash ^= Supply.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (Issued != 0L) hash ^= Issued.GetHashCode();
      if (externalInfo_ != null) hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (Supply != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Supply);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBurnable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IssueChainId);
      }
      if (Issued != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Issued);
      }
      if (externalInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ExternalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (Supply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Supply);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (Issued != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Issued);
      }
      if (externalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.Supply != 0L) {
        Supply = other.Supply;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.Issued != 0L) {
        Issued = other.Issued;
      }
      if (other.externalInfo_ != null) {
        if (externalInfo_ == null) {
          ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
        }
        ExternalInfo.MergeFrom(other.ExternalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            Supply = input.ReadInt64();
            break;
          }
          case 32: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 40: {
            Decimals = input.ReadInt32();
            break;
          }
          case 50: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 56: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 64: {
            IssueChainId = input.ReadInt32();
            break;
          }
          case 72: {
            Issued = input.ReadInt64();
            break;
          }
          case 82: {
            if (externalInfo_ == null) {
              ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
            }
            input.ReadMessage(ExternalInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExternalInfo : pb::IMessage<ExternalInfo> {
    private static readonly pb::MessageParser<ExternalInfo> _parser = new pb::MessageParser<ExternalInfo>(() => new ExternalInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfo(ExternalInfo other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfo Clone() {
      return new ExternalInfo(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_value_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 10);
    private readonly pbc::MapField<string, string> value_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalInfo other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateInput : pb::IMessage<CreateInput> {
    private static readonly pb::MessageParser<CreateInput> _parser = new pb::MessageParser<CreateInput>(() => new CreateInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput(CreateInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteList_ = other.lockWhiteList_.Clone();
      issueChainId_ = other.issueChainId_;
      externalInfo_ = other.externalInfo_ != null ? other.externalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput Clone() {
      return new CreateInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    /// <summary>
    /// The full name of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    /// <summary>
    /// The total supply of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    /// <summary>
    /// The precision of the token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    /// <summary>
    /// The address that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    /// <summary>
    /// A flag indicating if this token is burnable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lock_white_list" field.</summary>
    public const int LockWhiteListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_lockWhiteList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> lockWhiteList_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    /// <summary>
    /// A whitelist address list used to lock tokens.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> LockWhiteList {
      get { return lockWhiteList_; }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 8;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 9;
    private global::AElf.Contracts.MultiToken.ExternalInfo externalInfo_;
    /// <summary>
    /// The external information of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.ExternalInfo ExternalInfo {
      get { return externalInfo_; }
      set {
        externalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteList_.Equals(other.lockWhiteList_)) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (!object.Equals(ExternalInfo, other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteList_.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (externalInfo_ != null) hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteList_.WriteTo(output, _repeated_lockWhiteList_codec);
      if (IssueChainId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IssueChainId);
      }
      if (externalInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ExternalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteList_.CalculateSize(_repeated_lockWhiteList_codec);
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (externalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteList_.Add(other.lockWhiteList_);
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.externalInfo_ != null) {
        if (externalInfo_ == null) {
          ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
        }
        ExternalInfo.MergeFrom(other.ExternalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteList_.AddEntriesFrom(input, _repeated_lockWhiteList_codec);
            break;
          }
          case 64: {
            IssueChainId = input.ReadInt32();
            break;
          }
          case 74: {
            if (externalInfo_ == null) {
              ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
            }
            input.ReadMessage(ExternalInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPrimaryTokenSymbolInput : pb::IMessage<SetPrimaryTokenSymbolInput> {
    private static readonly pb::MessageParser<SetPrimaryTokenSymbolInput> _parser = new pb::MessageParser<SetPrimaryTokenSymbolInput>(() => new SetPrimaryTokenSymbolInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPrimaryTokenSymbolInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPrimaryTokenSymbolInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPrimaryTokenSymbolInput(SetPrimaryTokenSymbolInput other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPrimaryTokenSymbolInput Clone() {
      return new SetPrimaryTokenSymbolInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPrimaryTokenSymbolInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPrimaryTokenSymbolInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPrimaryTokenSymbolInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssueInput : pb::IMessage<IssueInput> {
    private static readonly pb::MessageParser<IssueInput> _parser = new pb::MessageParser<IssueInput>(() => new IssueInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput(IssueInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput Clone() {
      return new IssueInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The token symbol to issue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The token amount to issue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The target address to issue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (to_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferInput : pb::IMessage<TransferInput> {
    private static readonly pb::MessageParser<TransferInput> _parser = new pb::MessageParser<TransferInput>(() => new TransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput(TransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput Clone() {
      return new TransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The receiver of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The token symbol to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount to to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockInput : pb::IMessage<LockInput> {
    private static readonly pb::MessageParser<LockInput> _parser = new pb::MessageParser<LockInput>(() => new LockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput(LockInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput Clone() {
      return new LockInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    /// <summary>
    /// Id of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token to lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 4;
    private string usage_ = "";
    /// <summary>
    /// a memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private long amount_;
    /// <summary>
    /// The amount of tokens to lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Usage = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockInput : pb::IMessage<UnlockInput> {
    private static readonly pb::MessageParser<UnlockInput> _parser = new pb::MessageParser<UnlockInput>(() => new UnlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput(UnlockInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput Clone() {
      return new UnlockInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The one want to un-lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    /// <summary>
    /// Id of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token to un-lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 4;
    private string usage_ = "";
    /// <summary>
    /// a memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private long amount_;
    /// <summary>
    /// The amount of tokens to un-lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Usage = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferFromInput : pb::IMessage<TransferFromInput> {
    private static readonly pb::MessageParser<TransferFromInput> _parser = new pb::MessageParser<TransferFromInput>(() => new TransferFromInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput(TransferFromInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput Clone() {
      return new TransferFromInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    /// <summary>
    /// The source address of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The destination address of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveInput : pb::IMessage<ApproveInput> {
    private static readonly pb::MessageParser<ApproveInput> _parser = new pb::MessageParser<ApproveInput>(() => new ApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput(ApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput Clone() {
      return new ApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address that allowance will be increased. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token to approve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of token to approve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnApproveInput : pb::IMessage<UnApproveInput> {
    private static readonly pb::MessageParser<UnApproveInput> _parser = new pb::MessageParser<UnApproveInput>(() => new UnApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput(UnApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput Clone() {
      return new UnApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address that allowance will be decreased. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token to un-approve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of token to un-approve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BurnInput : pb::IMessage<BurnInput> {
    private static readonly pb::MessageParser<BurnInput> _parser = new pb::MessageParser<BurnInput>(() => new BurnInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput(BurnInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput Clone() {
      return new BurnInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token to burn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The amount of token to burn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeResourceTokenInput : pb::IMessage<ChargeResourceTokenInput> {
    private static readonly pb::MessageParser<ChargeResourceTokenInput> _parser = new pb::MessageParser<ChargeResourceTokenInput>(() => new ChargeResourceTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeResourceTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput(ChargeResourceTokenInput other) : this() {
      costDic_ = other.costDic_.Clone();
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput Clone() {
      return new ChargeResourceTokenInput(this);
    }

    /// <summary>Field number for the "cost_dic" field.</summary>
    public const int CostDicFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_costDic_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> costDic_ = new pbc::MapField<string, long>();
    /// <summary>
    /// Collection of charge resource token, Symbol->Amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> CostDic {
      get { return costDic_; }
    }

    /// <summary>Field number for the "caller" field.</summary>
    public const int CallerFieldNumber = 2;
    private global::AElf.Types.Address caller_;
    /// <summary>
    /// The sender of the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeResourceTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeResourceTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!CostDic.Equals(other.CostDic)) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= CostDic.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      costDic_.WriteTo(output, _map_costDic_codec);
      if (caller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Caller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += costDic_.CalculateSize(_map_costDic_codec);
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeResourceTokenInput other) {
      if (other == null) {
        return;
      }
      costDic_.Add(other.costDic_);
      if (other.caller_ != null) {
        if (caller_ == null) {
          Caller = new global::AElf.Types.Address();
        }
        Caller.MergeFrom(other.Caller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            costDic_.AddEntriesFrom(input, _map_costDic_codec);
            break;
          }
          case 18: {
            if (caller_ == null) {
              Caller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Caller);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFeeBill : pb::IMessage<TransactionFeeBill> {
    private static readonly pb::MessageParser<TransactionFeeBill> _parser = new pb::MessageParser<TransactionFeeBill>(() => new TransactionFeeBill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeBill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill(TransactionFeeBill other) : this() {
      feesMap_ = other.feesMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill Clone() {
      return new TransactionFeeBill(this);
    }

    /// <summary>Field number for the "fees_map" field.</summary>
    public const int FeesMapFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_feesMap_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> feesMap_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The transaction fee dictionary, Symbol->fee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> FeesMap {
      get { return feesMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeBill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeBill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FeesMap.Equals(other.FeesMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FeesMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      feesMap_.WriteTo(output, _map_feesMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += feesMap_.CalculateSize(_map_feesMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeBill other) {
      if (other == null) {
        return;
      }
      feesMap_.Add(other.feesMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            feesMap_.AddEntriesFrom(input, _map_feesMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFreeFeeAllowanceBill : pb::IMessage<TransactionFreeFeeAllowanceBill> {
    private static readonly pb::MessageParser<TransactionFreeFeeAllowanceBill> _parser = new pb::MessageParser<TransactionFreeFeeAllowanceBill>(() => new TransactionFreeFeeAllowanceBill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFreeFeeAllowanceBill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFreeFeeAllowanceBill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFreeFeeAllowanceBill(TransactionFreeFeeAllowanceBill other) : this() {
      freeFeeAllowancesMap_ = other.freeFeeAllowancesMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFreeFeeAllowanceBill Clone() {
      return new TransactionFreeFeeAllowanceBill(this);
    }

    /// <summary>Field number for the "free_fee_allowances_map" field.</summary>
    public const int FreeFeeAllowancesMapFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_freeFeeAllowancesMap_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> freeFeeAllowancesMap_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The transaction free fee allowance dictionary, Symbol->fee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> FreeFeeAllowancesMap {
      get { return freeFeeAllowancesMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFreeFeeAllowanceBill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFreeFeeAllowanceBill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!FreeFeeAllowancesMap.Equals(other.FreeFeeAllowancesMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= FreeFeeAllowancesMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      freeFeeAllowancesMap_.WriteTo(output, _map_freeFeeAllowancesMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += freeFeeAllowancesMap_.CalculateSize(_map_freeFeeAllowancesMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFreeFeeAllowanceBill other) {
      if (other == null) {
        return;
      }
      freeFeeAllowancesMap_.Add(other.freeFeeAllowancesMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeFeeAllowancesMap_.AddEntriesFrom(input, _map_freeFeeAllowancesMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckThresholdInput : pb::IMessage<CheckThresholdInput> {
    private static readonly pb::MessageParser<CheckThresholdInput> _parser = new pb::MessageParser<CheckThresholdInput>(() => new CheckThresholdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckThresholdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput(CheckThresholdInput other) : this() {
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      symbolToThreshold_ = other.symbolToThreshold_.Clone();
      isCheckAllowance_ = other.isCheckAllowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput Clone() {
      return new CheckThresholdInput(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::AElf.Types.Address sender_;
    /// <summary>
    /// The sender of the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "symbol_to_threshold" field.</summary>
    public const int SymbolToThresholdFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_symbolToThreshold_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<string, long> symbolToThreshold_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The threshold to set, Symbol->Threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> SymbolToThreshold {
      get { return symbolToThreshold_; }
    }

    /// <summary>Field number for the "is_check_allowance" field.</summary>
    public const int IsCheckAllowanceFieldNumber = 3;
    private bool isCheckAllowance_;
    /// <summary>
    /// Whether to check the allowance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCheckAllowance {
      get { return isCheckAllowance_; }
      set {
        isCheckAllowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckThresholdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckThresholdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      if (!SymbolToThreshold.Equals(other.SymbolToThreshold)) return false;
      if (IsCheckAllowance != other.IsCheckAllowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      hash ^= SymbolToThreshold.GetHashCode();
      if (IsCheckAllowance != false) hash ^= IsCheckAllowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
      symbolToThreshold_.WriteTo(output, _map_symbolToThreshold_codec);
      if (IsCheckAllowance != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCheckAllowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      size += symbolToThreshold_.CalculateSize(_map_symbolToThreshold_codec);
      if (IsCheckAllowance != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckThresholdInput other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      symbolToThreshold_.Add(other.symbolToThreshold_);
      if (other.IsCheckAllowance != false) {
        IsCheckAllowance = other.IsCheckAllowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 18: {
            symbolToThreshold_.AddEntriesFrom(input, _map_symbolToThreshold_codec);
            break;
          }
          case 24: {
            IsCheckAllowance = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTokenInfoInput : pb::IMessage<GetTokenInfoInput> {
    private static readonly pb::MessageParser<GetTokenInfoInput> _parser = new pb::MessageParser<GetTokenInfoInput>(() => new GetTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput(GetTokenInfoInput other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput Clone() {
      return new GetTokenInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceInput : pb::IMessage<GetBalanceInput> {
    private static readonly pb::MessageParser<GetBalanceInput> _parser = new pb::MessageParser<GetBalanceInput>(() => new GetBalanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput(GetBalanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput Clone() {
      return new GetBalanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The target address of the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceOutput : pb::IMessage<GetBalanceOutput> {
    private static readonly pb::MessageParser<GetBalanceOutput> _parser = new pb::MessageParser<GetBalanceOutput>(() => new GetBalanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput(GetBalanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      balance_ = other.balance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput Clone() {
      return new GetBalanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The target address of the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 3;
    private long balance_;
    /// <summary>
    /// The balance of the owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (Balance != other.Balance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (Balance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Balance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 24: {
            Balance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceInput : pb::IMessage<GetAllowanceInput> {
    private static readonly pb::MessageParser<GetAllowanceInput> _parser = new pb::MessageParser<GetAllowanceInput>(() => new GetAllowanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput(GetAllowanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput Clone() {
      return new GetAllowanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The address of the token owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address of the spender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceOutput : pb::IMessage<GetAllowanceOutput> {
    private static readonly pb::MessageParser<GetAllowanceOutput> _parser = new pb::MessageParser<GetAllowanceOutput>(() => new GetAllowanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput(GetAllowanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      allowance_ = other.allowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput Clone() {
      return new GetAllowanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The address of the token owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address of the spender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 4;
    private long allowance_;
    /// <summary>
    /// The amount of allowance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Allowance != other.Allowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Allowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Allowance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 32: {
            Allowance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainTransferInput : pb::IMessage<CrossChainTransferInput> {
    private static readonly pb::MessageParser<CrossChainTransferInput> _parser = new pb::MessageParser<CrossChainTransferInput>(() => new CrossChainTransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainTransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput(CrossChainTransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toChainId_ = other.toChainId_;
      issueChainId_ = other.issueChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput Clone() {
      return new CrossChainTransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The receiver of transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of token to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_chain_id" field.</summary>
    public const int ToChainIdFieldNumber = 5;
    private int toChainId_;
    /// <summary>
    /// The destination chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToChainId {
      get { return toChainId_; }
      set {
        toChainId_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 6;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainTransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainTransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (ToChainId != other.ToChainId) return false;
      if (IssueChainId != other.IssueChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (ToChainId != 0) hash ^= ToChainId.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (ToChainId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToChainId);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IssueChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (ToChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToChainId);
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainTransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.ToChainId != 0) {
        ToChainId = other.ToChainId;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
          case 40: {
            ToChainId = input.ReadInt32();
            break;
          }
          case 48: {
            IssueChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainReceiveTokenInput : pb::IMessage<CrossChainReceiveTokenInput> {
    private static readonly pb::MessageParser<CrossChainReceiveTokenInput> _parser = new pb::MessageParser<CrossChainReceiveTokenInput>(() => new CrossChainReceiveTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainReceiveTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput(CrossChainReceiveTokenInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transferTransactionBytes_ = other.transferTransactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput Clone() {
      return new CrossChainReceiveTokenInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    /// <summary>
    /// The source chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    /// <summary>
    /// The height of the transfer transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transfer_transaction_bytes" field.</summary>
    public const int TransferTransactionBytesFieldNumber = 3;
    private pb::ByteString transferTransactionBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// The raw bytes of the transfer transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransferTransactionBytes {
      get { return transferTransactionBytes_; }
      set {
        transferTransactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    /// <summary>
    /// The merkle path created from the transfer transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainReceiveTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainReceiveTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransferTransactionBytes != other.TransferTransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransferTransactionBytes.Length != 0) hash ^= TransferTransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransferTransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransferTransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainReceiveTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransferTransactionBytes.Length != 0) {
        TransferTransactionBytes = other.TransferTransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransferTransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IsInWhiteListInput : pb::IMessage<IsInWhiteListInput> {
    private static readonly pb::MessageParser<IsInWhiteListInput> _parser = new pb::MessageParser<IsInWhiteListInput>(() => new IsInWhiteListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsInWhiteListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput(IsInWhiteListInput other) : this() {
      symbol_ = other.symbol_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput Clone() {
      return new IsInWhiteListInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The address to check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsInWhiteListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsInWhiteListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsInWhiteListInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolToPayTxSizeFee : pb::IMessage<SymbolToPayTxSizeFee> {
    private static readonly pb::MessageParser<SymbolToPayTxSizeFee> _parser = new pb::MessageParser<SymbolToPayTxSizeFee>(() => new SymbolToPayTxSizeFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolToPayTxSizeFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTxSizeFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTxSizeFee(SymbolToPayTxSizeFee other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      baseTokenWeight_ = other.baseTokenWeight_;
      addedTokenWeight_ = other.addedTokenWeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTxSizeFee Clone() {
      return new SymbolToPayTxSizeFee(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    /// <summary>
    /// The symbol of token. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_token_weight" field.</summary>
    public const int BaseTokenWeightFieldNumber = 2;
    private int baseTokenWeight_;
    /// <summary>
    /// The charge weight of primary token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseTokenWeight {
      get { return baseTokenWeight_; }
      set {
        baseTokenWeight_ = value;
      }
    }

    /// <summary>Field number for the "added_token_weight" field.</summary>
    public const int AddedTokenWeightFieldNumber = 3;
    private int addedTokenWeight_;
    /// <summary>
    /// The new added token charge weight. For example, the charge weight of primary Token is set to 1. 
    /// The newly added token charge weight is set to 10. If the transaction requires 1 unit of primary token, 
    /// the user can also pay for 10 newly added tokens.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedTokenWeight {
      get { return addedTokenWeight_; }
      set {
        addedTokenWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolToPayTxSizeFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolToPayTxSizeFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (BaseTokenWeight != other.BaseTokenWeight) return false;
      if (AddedTokenWeight != other.AddedTokenWeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (BaseTokenWeight != 0) hash ^= BaseTokenWeight.GetHashCode();
      if (AddedTokenWeight != 0) hash ^= AddedTokenWeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (BaseTokenWeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BaseTokenWeight);
      }
      if (AddedTokenWeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddedTokenWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (BaseTokenWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseTokenWeight);
      }
      if (AddedTokenWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedTokenWeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolToPayTxSizeFee other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.BaseTokenWeight != 0) {
        BaseTokenWeight = other.BaseTokenWeight;
      }
      if (other.AddedTokenWeight != 0) {
        AddedTokenWeight = other.AddedTokenWeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            BaseTokenWeight = input.ReadInt32();
            break;
          }
          case 24: {
            AddedTokenWeight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolListToPayTxSizeFee : pb::IMessage<SymbolListToPayTxSizeFee> {
    private static readonly pb::MessageParser<SymbolListToPayTxSizeFee> _parser = new pb::MessageParser<SymbolListToPayTxSizeFee>(() => new SymbolListToPayTxSizeFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolListToPayTxSizeFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTxSizeFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTxSizeFee(SymbolListToPayTxSizeFee other) : this() {
      symbolsToPayTxSizeFee_ = other.symbolsToPayTxSizeFee_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTxSizeFee Clone() {
      return new SymbolListToPayTxSizeFee(this);
    }

    /// <summary>Field number for the "symbols_to_pay_tx_size_fee" field.</summary>
    public const int SymbolsToPayTxSizeFeeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> _repeated_symbolsToPayTxSizeFee_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> symbolsToPayTxSizeFee_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee>();
    /// <summary>
    /// Transaction fee token information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> SymbolsToPayTxSizeFee {
      get { return symbolsToPayTxSizeFee_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolListToPayTxSizeFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolListToPayTxSizeFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolsToPayTxSizeFee_.Equals(other.symbolsToPayTxSizeFee_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolsToPayTxSizeFee_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      symbolsToPayTxSizeFee_.WriteTo(output, _repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolsToPayTxSizeFee_.CalculateSize(_repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolListToPayTxSizeFee other) {
      if (other == null) {
        return;
      }
      symbolsToPayTxSizeFee_.Add(other.symbolsToPayTxSizeFee_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolsToPayTxSizeFee_.AddEntriesFrom(input, _repeated_symbolsToPayTxSizeFee_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeTransactionFeesInput : pb::IMessage<ChargeTransactionFeesInput> {
    private static readonly pb::MessageParser<ChargeTransactionFeesInput> _parser = new pb::MessageParser<ChargeTransactionFeesInput>(() => new ChargeTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput(ChargeTransactionFeesInput other) : this() {
      methodName_ = other.methodName_;
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      transactionSizeFee_ = other.transactionSizeFee_;
      symbolsToPayTxSizeFee_ = other.symbolsToPayTxSizeFee_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput Clone() {
      return new ChargeTransactionFeesInput(this);
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 1;
    private string methodName_ = "";
    /// <summary>
    /// The method name of transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 2;
    private global::AElf.Types.Address contractAddress_;
    /// <summary>
    /// The contract address of transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "transaction_size_fee" field.</summary>
    public const int TransactionSizeFeeFieldNumber = 3;
    private long transactionSizeFee_;
    /// <summary>
    /// The amount of transaction size fee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionSizeFee {
      get { return transactionSizeFee_; }
      set {
        transactionSizeFee_ = value;
      }
    }

    /// <summary>Field number for the "symbols_to_pay_tx_size_fee" field.</summary>
    public const int SymbolsToPayTxSizeFeeFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> _repeated_symbolsToPayTxSizeFee_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> symbolsToPayTxSizeFee_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee>();
    /// <summary>
    /// Transaction fee token information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTxSizeFee> SymbolsToPayTxSizeFee {
      get { return symbolsToPayTxSizeFee_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MethodName != other.MethodName) return false;
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (TransactionSizeFee != other.TransactionSizeFee) return false;
      if(!symbolsToPayTxSizeFee_.Equals(other.symbolsToPayTxSizeFee_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (TransactionSizeFee != 0L) hash ^= TransactionSizeFee.GetHashCode();
      hash ^= symbolsToPayTxSizeFee_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MethodName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MethodName);
      }
      if (contractAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContractAddress);
      }
      if (TransactionSizeFee != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TransactionSizeFee);
      }
      symbolsToPayTxSizeFee_.WriteTo(output, _repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (TransactionSizeFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionSizeFee);
      }
      size += symbolsToPayTxSizeFee_.CalculateSize(_repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.TransactionSizeFee != 0L) {
        TransactionSizeFee = other.TransactionSizeFee;
      }
      symbolsToPayTxSizeFee_.Add(other.symbolsToPayTxSizeFee_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MethodName = input.ReadString();
            break;
          }
          case 18: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 24: {
            TransactionSizeFee = input.ReadInt64();
            break;
          }
          case 34: {
            symbolsToPayTxSizeFee_.AddEntriesFrom(input, _repeated_symbolsToPayTxSizeFee_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeTransactionFeesOutput : pb::IMessage<ChargeTransactionFeesOutput> {
    private static readonly pb::MessageParser<ChargeTransactionFeesOutput> _parser = new pb::MessageParser<ChargeTransactionFeesOutput>(() => new ChargeTransactionFeesOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeTransactionFeesOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesOutput(ChargeTransactionFeesOutput other) : this() {
      success_ = other.success_;
      chargingInformation_ = other.chargingInformation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesOutput Clone() {
      return new ChargeTransactionFeesOutput(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// Whether the charge was successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "charging_information" field.</summary>
    public const int ChargingInformationFieldNumber = 2;
    private string chargingInformation_ = "";
    /// <summary>
    /// The charging information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargingInformation {
      get { return chargingInformation_; }
      set {
        chargingInformation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeTransactionFeesOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeTransactionFeesOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (ChargingInformation != other.ChargingInformation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (ChargingInformation.Length != 0) hash ^= ChargingInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (ChargingInformation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChargingInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (ChargingInformation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChargingInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeTransactionFeesOutput other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ChargingInformation.Length != 0) {
        ChargingInformation = other.ChargingInformation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            ChargingInformation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallbackInfo : pb::IMessage<CallbackInfo> {
    private static readonly pb::MessageParser<CallbackInfo> _parser = new pb::MessageParser<CallbackInfo>(() => new CallbackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallbackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo(CallbackInfo other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      methodName_ = other.methodName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo Clone() {
      return new CallbackInfo(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallbackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallbackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (MethodName != other.MethodName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallbackInfo other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExtraTokenListModified : pb::IMessage<ExtraTokenListModified> {
    private static readonly pb::MessageParser<ExtraTokenListModified> _parser = new pb::MessageParser<ExtraTokenListModified>(() => new ExtraTokenListModified());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtraTokenListModified> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified(ExtraTokenListModified other) : this() {
      symbolListToPayTxSizeFee_ = other.symbolListToPayTxSizeFee_ != null ? other.symbolListToPayTxSizeFee_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified Clone() {
      return new ExtraTokenListModified(this);
    }

    /// <summary>Field number for the "symbol_list_to_pay_tx_size_fee" field.</summary>
    public const int SymbolListToPayTxSizeFeeFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee symbolListToPayTxSizeFee_;
    /// <summary>
    /// Transaction fee token information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee SymbolListToPayTxSizeFee {
      get { return symbolListToPayTxSizeFee_; }
      set {
        symbolListToPayTxSizeFee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtraTokenListModified);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtraTokenListModified other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SymbolListToPayTxSizeFee, other.SymbolListToPayTxSizeFee)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (symbolListToPayTxSizeFee_ != null) hash ^= SymbolListToPayTxSizeFee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (symbolListToPayTxSizeFee_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolListToPayTxSizeFee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (symbolListToPayTxSizeFee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolListToPayTxSizeFee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtraTokenListModified other) {
      if (other == null) {
        return;
      }
      if (other.symbolListToPayTxSizeFee_ != null) {
        if (symbolListToPayTxSizeFee_ == null) {
          SymbolListToPayTxSizeFee = new global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee();
        }
        SymbolListToPayTxSizeFee.MergeFrom(other.SymbolListToPayTxSizeFee);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbolListToPayTxSizeFee_ == null) {
              SymbolListToPayTxSizeFee = new global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee();
            }
            input.ReadMessage(SymbolListToPayTxSizeFee);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLockedAmountInput : pb::IMessage<GetLockedAmountInput> {
    private static readonly pb::MessageParser<GetLockedAmountInput> _parser = new pb::MessageParser<GetLockedAmountInput>(() => new GetLockedAmountInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLockedAmountInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput(GetLockedAmountInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      symbol_ = other.symbol_;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput Clone() {
      return new GetLockedAmountInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The address of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The token symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Types.Hash lockId_;
    /// <summary>
    /// The id of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLockedAmountInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLockedAmountInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLockedAmountInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLockedAmountOutput : pb::IMessage<GetLockedAmountOutput> {
    private static readonly pb::MessageParser<GetLockedAmountOutput> _parser = new pb::MessageParser<GetLockedAmountOutput>(() => new GetLockedAmountOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLockedAmountOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput(GetLockedAmountOutput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      symbol_ = other.symbol_;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput Clone() {
      return new GetLockedAmountOutput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The address of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The token symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Types.Hash lockId_;
    /// <summary>
    /// The id of the lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The locked amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLockedAmountOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLockedAmountOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLockedAmountOutput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenInfoList : pb::IMessage<TokenInfoList> {
    private static readonly pb::MessageParser<TokenInfoList> _parser = new pb::MessageParser<TokenInfoList>(() => new TokenInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList(TokenInfoList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList Clone() {
      return new TokenInfoList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.TokenInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.TokenInfo.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo> value_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo>();
    /// <summary>
    /// List of token information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfoList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCrossChainTransferTokenContractAddressInput : pb::IMessage<GetCrossChainTransferTokenContractAddressInput> {
    private static readonly pb::MessageParser<GetCrossChainTransferTokenContractAddressInput> _parser = new pb::MessageParser<GetCrossChainTransferTokenContractAddressInput>(() => new GetCrossChainTransferTokenContractAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCrossChainTransferTokenContractAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput(GetCrossChainTransferTokenContractAddressInput other) : this() {
      chainId_ = other.chainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput Clone() {
      return new GetCrossChainTransferTokenContractAddressInput(this);
    }

    /// <summary>Field number for the "chainId" field.</summary>
    public const int ChainIdFieldNumber = 1;
    private int chainId_;
    /// <summary>
    /// The chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCrossChainTransferTokenContractAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCrossChainTransferTokenContractAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChainId != other.ChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCrossChainTransferTokenContractAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainCreateTokenInput : pb::IMessage<CrossChainCreateTokenInput> {
    private static readonly pb::MessageParser<CrossChainCreateTokenInput> _parser = new pb::MessageParser<CrossChainCreateTokenInput>(() => new CrossChainCreateTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainCreateTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput(CrossChainCreateTokenInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transactionBytes_ = other.transactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput Clone() {
      return new CrossChainCreateTokenInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    /// <summary>
    /// The chain id of the chain on which the token was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    /// <summary>
    /// The height of the transaction that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transaction_bytes" field.</summary>
    public const int TransactionBytesFieldNumber = 3;
    private pb::ByteString transactionBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// The transaction that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionBytes {
      get { return transactionBytes_; }
      set {
        transactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    /// <summary>
    /// The merkle path created from the transaction that created the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainCreateTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainCreateTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransactionBytes != other.TransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransactionBytes.Length != 0) hash ^= TransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainCreateTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransactionBytes.Length != 0) {
        TransactionBytes = other.TransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeFromParentChainInput : pb::IMessage<InitializeFromParentChainInput> {
    private static readonly pb::MessageParser<InitializeFromParentChainInput> _parser = new pb::MessageParser<InitializeFromParentChainInput>(() => new InitializeFromParentChainInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeFromParentChainInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeFromParentChainInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeFromParentChainInput(InitializeFromParentChainInput other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      registeredOtherTokenContractAddresses_ = other.registeredOtherTokenContractAddresses_.Clone();
      creator_ = other.creator_ != null ? other.creator_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeFromParentChainInput Clone() {
      return new InitializeFromParentChainInput(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<string, int> resourceAmount_ = new pbc::MapField<string, int>();
    /// <summary>
    /// The amount of resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> ResourceAmount {
      get { return resourceAmount_; }
    }

    /// <summary>Field number for the "registered_other_token_contract_addresses" field.</summary>
    public const int RegisteredOtherTokenContractAddressesFieldNumber = 2;
    private static readonly pbc::MapField<int, global::AElf.Types.Address>.Codec _map_registeredOtherTokenContractAddresses_codec
        = new pbc::MapField<int, global::AElf.Types.Address>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::AElf.Types.Address.Parser), 18);
    private readonly pbc::MapField<int, global::AElf.Types.Address> registeredOtherTokenContractAddresses_ = new pbc::MapField<int, global::AElf.Types.Address>();
    /// <summary>
    /// The token contract addresses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::AElf.Types.Address> RegisteredOtherTokenContractAddresses {
      get { return registeredOtherTokenContractAddresses_; }
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 3;
    private global::AElf.Types.Address creator_;
    /// <summary>
    /// The creator the side chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeFromParentChainInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeFromParentChainInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      if (!RegisteredOtherTokenContractAddresses.Equals(other.RegisteredOtherTokenContractAddresses)) return false;
      if (!object.Equals(Creator, other.Creator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      hash ^= RegisteredOtherTokenContractAddresses.GetHashCode();
      if (creator_ != null) hash ^= Creator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      registeredOtherTokenContractAddresses_.WriteTo(output, _map_registeredOtherTokenContractAddresses_codec);
      if (creator_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Creator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      size += registeredOtherTokenContractAddresses_.CalculateSize(_map_registeredOtherTokenContractAddresses_codec);
      if (creator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeFromParentChainInput other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      registeredOtherTokenContractAddresses_.Add(other.registeredOtherTokenContractAddresses_);
      if (other.creator_ != null) {
        if (creator_ == null) {
          Creator = new global::AElf.Types.Address();
        }
        Creator.MergeFrom(other.Creator);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
          case 18: {
            registeredOtherTokenContractAddresses_.AddEntriesFrom(input, _map_registeredOtherTokenContractAddresses_codec);
            break;
          }
          case 26: {
            if (creator_ == null) {
              Creator = new global::AElf.Types.Address();
            }
            input.ReadMessage(Creator);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCoefficientsInput : pb::IMessage<UpdateCoefficientsInput> {
    private static readonly pb::MessageParser<UpdateCoefficientsInput> _parser = new pb::MessageParser<UpdateCoefficientsInput>(() => new UpdateCoefficientsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCoefficientsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCoefficientsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCoefficientsInput(UpdateCoefficientsInput other) : this() {
      pieceNumbers_ = other.pieceNumbers_.Clone();
      coefficients_ = other.coefficients_ != null ? other.coefficients_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCoefficientsInput Clone() {
      return new UpdateCoefficientsInput(this);
    }

    /// <summary>Field number for the "piece_numbers" field.</summary>
    public const int PieceNumbersFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_pieceNumbers_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> pieceNumbers_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The specify pieces gonna update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PieceNumbers {
      get { return pieceNumbers_; }
    }

    /// <summary>Field number for the "coefficients" field.</summary>
    public const int CoefficientsFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.CalculateFeeCoefficients coefficients_;
    /// <summary>
    /// Coefficients of one single type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.CalculateFeeCoefficients Coefficients {
      get { return coefficients_; }
      set {
        coefficients_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCoefficientsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCoefficientsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pieceNumbers_.Equals(other.pieceNumbers_)) return false;
      if (!object.Equals(Coefficients, other.Coefficients)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pieceNumbers_.GetHashCode();
      if (coefficients_ != null) hash ^= Coefficients.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pieceNumbers_.WriteTo(output, _repeated_pieceNumbers_codec);
      if (coefficients_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Coefficients);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pieceNumbers_.CalculateSize(_repeated_pieceNumbers_codec);
      if (coefficients_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coefficients);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCoefficientsInput other) {
      if (other == null) {
        return;
      }
      pieceNumbers_.Add(other.pieceNumbers_);
      if (other.coefficients_ != null) {
        if (coefficients_ == null) {
          Coefficients = new global::AElf.Contracts.MultiToken.CalculateFeeCoefficients();
        }
        Coefficients.MergeFrom(other.Coefficients);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            pieceNumbers_.AddEntriesFrom(input, _repeated_pieceNumbers_codec);
            break;
          }
          case 18: {
            if (coefficients_ == null) {
              Coefficients = new global::AElf.Contracts.MultiToken.CalculateFeeCoefficients();
            }
            input.ReadMessage(Coefficients);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculateFeePieceCoefficients : pb::IMessage<CalculateFeePieceCoefficients> {
    private static readonly pb::MessageParser<CalculateFeePieceCoefficients> _parser = new pb::MessageParser<CalculateFeePieceCoefficients>(() => new CalculateFeePieceCoefficients());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateFeePieceCoefficients> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeePieceCoefficients() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeePieceCoefficients(CalculateFeePieceCoefficients other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeePieceCoefficients Clone() {
      return new CalculateFeePieceCoefficients(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_value_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> value_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Coefficients of one single piece.
    /// The first char is its type: liner / power.
    /// The second char is its piece upper bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateFeePieceCoefficients);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateFeePieceCoefficients other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateFeePieceCoefficients other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculateFeeCoefficients : pb::IMessage<CalculateFeeCoefficients> {
    private static readonly pb::MessageParser<CalculateFeeCoefficients> _parser = new pb::MessageParser<CalculateFeeCoefficients>(() => new CalculateFeeCoefficients());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateFeeCoefficients> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficients() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficients(CalculateFeeCoefficients other) : this() {
      feeTokenType_ = other.feeTokenType_;
      pieceCoefficientsList_ = other.pieceCoefficientsList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficients Clone() {
      return new CalculateFeeCoefficients(this);
    }

    /// <summary>Field number for the "fee_token_type" field.</summary>
    public const int FeeTokenTypeFieldNumber = 1;
    private int feeTokenType_;
    /// <summary>
    /// The resource fee type, like READ, WRITE, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FeeTokenType {
      get { return feeTokenType_; }
      set {
        feeTokenType_ = value;
      }
    }

    /// <summary>Field number for the "piece_coefficients_list" field.</summary>
    public const int PieceCoefficientsListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients> _repeated_pieceCoefficientsList_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients> pieceCoefficientsList_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients>();
    /// <summary>
    /// Coefficients of one single piece.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeePieceCoefficients> PieceCoefficientsList {
      get { return pieceCoefficientsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateFeeCoefficients);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateFeeCoefficients other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeeTokenType != other.FeeTokenType) return false;
      if(!pieceCoefficientsList_.Equals(other.pieceCoefficientsList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeeTokenType != 0) hash ^= FeeTokenType.GetHashCode();
      hash ^= pieceCoefficientsList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeeTokenType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FeeTokenType);
      }
      pieceCoefficientsList_.WriteTo(output, _repeated_pieceCoefficientsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeeTokenType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FeeTokenType);
      }
      size += pieceCoefficientsList_.CalculateSize(_repeated_pieceCoefficientsList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateFeeCoefficients other) {
      if (other == null) {
        return;
      }
      if (other.FeeTokenType != 0) {
        FeeTokenType = other.FeeTokenType;
      }
      pieceCoefficientsList_.Add(other.pieceCoefficientsList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FeeTokenType = input.ReadInt32();
            break;
          }
          case 18: {
            pieceCoefficientsList_.AddEntriesFrom(input, _repeated_pieceCoefficientsList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllCalculateFeeCoefficients : pb::IMessage<AllCalculateFeeCoefficients> {
    private static readonly pb::MessageParser<AllCalculateFeeCoefficients> _parser = new pb::MessageParser<AllCalculateFeeCoefficients>(() => new AllCalculateFeeCoefficients());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllCalculateFeeCoefficients> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllCalculateFeeCoefficients() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllCalculateFeeCoefficients(AllCalculateFeeCoefficients other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllCalculateFeeCoefficients Clone() {
      return new AllCalculateFeeCoefficients(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> value_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients>();
    /// <summary>
    /// The coefficients of fee Calculation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllCalculateFeeCoefficients);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllCalculateFeeCoefficients other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllCalculateFeeCoefficients other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalTransactionFeesMap : pb::IMessage<TotalTransactionFeesMap> {
    private static readonly pb::MessageParser<TotalTransactionFeesMap> _parser = new pb::MessageParser<TotalTransactionFeesMap>(() => new TotalTransactionFeesMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalTransactionFeesMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalTransactionFeesMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalTransactionFeesMap(TotalTransactionFeesMap other) : this() {
      value_ = other.value_.Clone();
      blockHash_ = other.blockHash_ != null ? other.blockHash_.Clone() : null;
      blockHeight_ = other.blockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalTransactionFeesMap Clone() {
      return new TotalTransactionFeesMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_value_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> value_ = new pbc::MapField<string, long>();
    /// <summary>
    /// Token dictionary that charge transaction fee, Symbol->Amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private global::AElf.Types.Hash blockHash_;
    /// <summary>
    /// The hash of the block processing the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 3;
    private long blockHeight_;
    /// <summary>
    /// The height of the block processing the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalTransactionFeesMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalTransactionFeesMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      if (!object.Equals(BlockHash, other.BlockHash)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (blockHash_ != null) hash ^= BlockHash.GetHashCode();
      if (BlockHeight != 0L) hash ^= BlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (blockHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockHash);
      }
      if (BlockHeight != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (blockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHash);
      }
      if (BlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalTransactionFeesMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      if (other.blockHash_ != null) {
        if (blockHash_ == null) {
          BlockHash = new global::AElf.Types.Hash();
        }
        BlockHash.MergeFrom(other.BlockHash);
      }
      if (other.BlockHeight != 0L) {
        BlockHeight = other.BlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
          case 18: {
            if (blockHash_ == null) {
              BlockHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(BlockHash);
            break;
          }
          case 24: {
            BlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalResourceTokensMaps : pb::IMessage<TotalResourceTokensMaps> {
    private static readonly pb::MessageParser<TotalResourceTokensMaps> _parser = new pb::MessageParser<TotalResourceTokensMaps>(() => new TotalResourceTokensMaps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalResourceTokensMaps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMaps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMaps(TotalResourceTokensMaps other) : this() {
      value_ = other.value_.Clone();
      blockHash_ = other.blockHash_ != null ? other.blockHash_.Clone() : null;
      blockHeight_ = other.blockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMaps Clone() {
      return new TotalResourceTokensMaps(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.ContractTotalResourceTokens> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.ContractTotalResourceTokens.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.ContractTotalResourceTokens> value_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.ContractTotalResourceTokens>();
    /// <summary>
    /// Resource tokens to charge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.ContractTotalResourceTokens> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private global::AElf.Types.Hash blockHash_;
    /// <summary>
    /// The hash of the block processing the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 3;
    private long blockHeight_;
    /// <summary>
    /// The height of the block processing the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalResourceTokensMaps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalResourceTokensMaps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      if (!object.Equals(BlockHash, other.BlockHash)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (blockHash_ != null) hash ^= BlockHash.GetHashCode();
      if (BlockHeight != 0L) hash ^= BlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (blockHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockHash);
      }
      if (BlockHeight != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (blockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHash);
      }
      if (BlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalResourceTokensMaps other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      if (other.blockHash_ != null) {
        if (blockHash_ == null) {
          BlockHash = new global::AElf.Types.Hash();
        }
        BlockHash.MergeFrom(other.BlockHash);
      }
      if (other.BlockHeight != 0L) {
        BlockHeight = other.BlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
          case 18: {
            if (blockHash_ == null) {
              BlockHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(BlockHash);
            break;
          }
          case 24: {
            BlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContractTotalResourceTokens : pb::IMessage<ContractTotalResourceTokens> {
    private static readonly pb::MessageParser<ContractTotalResourceTokens> _parser = new pb::MessageParser<ContractTotalResourceTokens>(() => new ContractTotalResourceTokens());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContractTotalResourceTokens> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractTotalResourceTokens() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractTotalResourceTokens(ContractTotalResourceTokens other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      tokensMap_ = other.tokensMap_ != null ? other.tokensMap_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContractTotalResourceTokens Clone() {
      return new ContractTotalResourceTokens(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    /// <summary>
    /// The contract address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "tokens_map" field.</summary>
    public const int TokensMapFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.TotalResourceTokensMap tokensMap_;
    /// <summary>
    /// Resource tokens to charge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.TotalResourceTokensMap TokensMap {
      get { return tokensMap_; }
      set {
        tokensMap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContractTotalResourceTokens);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContractTotalResourceTokens other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (!object.Equals(TokensMap, other.TokensMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (tokensMap_ != null) hash ^= TokensMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (tokensMap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokensMap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (tokensMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokensMap);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContractTotalResourceTokens other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.tokensMap_ != null) {
        if (tokensMap_ == null) {
          TokensMap = new global::AElf.Contracts.MultiToken.TotalResourceTokensMap();
        }
        TokensMap.MergeFrom(other.TokensMap);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            if (tokensMap_ == null) {
              TokensMap = new global::AElf.Contracts.MultiToken.TotalResourceTokensMap();
            }
            input.ReadMessage(TokensMap);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalResourceTokensMap : pb::IMessage<TotalResourceTokensMap> {
    private static readonly pb::MessageParser<TotalResourceTokensMap> _parser = new pb::MessageParser<TotalResourceTokensMap>(() => new TotalResourceTokensMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalResourceTokensMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMap(TotalResourceTokensMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalResourceTokensMap Clone() {
      return new TotalResourceTokensMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_value_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> value_ = new pbc::MapField<string, long>();
    /// <summary>
    /// Resource token dictionary, Symbol->Amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalResourceTokensMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalResourceTokensMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalResourceTokensMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeTokenIssuerInput : pb::IMessage<ChangeTokenIssuerInput> {
    private static readonly pb::MessageParser<ChangeTokenIssuerInput> _parser = new pb::MessageParser<ChangeTokenIssuerInput>(() => new ChangeTokenIssuerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTokenIssuerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTokenIssuerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTokenIssuerInput(ChangeTokenIssuerInput other) : this() {
      symbol_ = other.symbol_;
      newTokenIssuer_ = other.newTokenIssuer_ != null ? other.newTokenIssuer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTokenIssuerInput Clone() {
      return new ChangeTokenIssuerInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The token symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_token_Issuer" field.</summary>
    public const int NewTokenIssuerFieldNumber = 2;
    private global::AElf.Types.Address newTokenIssuer_;
    /// <summary>
    /// The new token issuer for change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address NewTokenIssuer {
      get { return newTokenIssuer_; }
      set {
        newTokenIssuer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTokenIssuerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTokenIssuerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(NewTokenIssuer, other.NewTokenIssuer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (newTokenIssuer_ != null) hash ^= NewTokenIssuer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (newTokenIssuer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewTokenIssuer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (newTokenIssuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTokenIssuer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTokenIssuerInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.newTokenIssuer_ != null) {
        if (newTokenIssuer_ == null) {
          NewTokenIssuer = new global::AElf.Types.Address();
        }
        NewTokenIssuer.MergeFrom(other.NewTokenIssuer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (newTokenIssuer_ == null) {
              NewTokenIssuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(NewTokenIssuer);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetExternalInfoInput : pb::IMessage<ResetExternalInfoInput> {
    private static readonly pb::MessageParser<ResetExternalInfoInput> _parser = new pb::MessageParser<ResetExternalInfoInput>(() => new ResetExternalInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetExternalInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetExternalInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetExternalInfoInput(ResetExternalInfoInput other) : this() {
      symbol_ = other.symbol_;
      externalInfo_ = other.externalInfo_ != null ? other.externalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetExternalInfoInput Clone() {
      return new ResetExternalInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.ExternalInfo externalInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.ExternalInfo ExternalInfo {
      get { return externalInfo_; }
      set {
        externalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetExternalInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetExternalInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(ExternalInfo, other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (externalInfo_ != null) hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (externalInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExternalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (externalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetExternalInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.externalInfo_ != null) {
        if (externalInfo_ == null) {
          ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
        }
        ExternalInfo.MergeFrom(other.ExternalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (externalInfo_ == null) {
              ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
            }
            input.ReadMessage(ExternalInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringList : pb::IMessage<StringList> {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodFeeFreeAllowancesConfig : pb::IMessage<MethodFeeFreeAllowancesConfig> {
    private static readonly pb::MessageParser<MethodFeeFreeAllowancesConfig> _parser = new pb::MessageParser<MethodFeeFreeAllowancesConfig>(() => new MethodFeeFreeAllowancesConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodFeeFreeAllowancesConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowancesConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowancesConfig(MethodFeeFreeAllowancesConfig other) : this() {
      freeAllowances_ = other.freeAllowances_ != null ? other.freeAllowances_.Clone() : null;
      refreshSeconds_ = other.refreshSeconds_;
      threshold_ = other.threshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowancesConfig Clone() {
      return new MethodFeeFreeAllowancesConfig(this);
    }

    /// <summary>Field number for the "free_allowances" field.</summary>
    public const int FreeAllowancesFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances freeAllowances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances FreeAllowances {
      get { return freeAllowances_; }
      set {
        freeAllowances_ = value;
      }
    }

    /// <summary>Field number for the "refresh_seconds" field.</summary>
    public const int RefreshSecondsFieldNumber = 2;
    private long refreshSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshSeconds {
      get { return refreshSeconds_; }
      set {
        refreshSeconds_ = value;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 3;
    private long threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodFeeFreeAllowancesConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodFeeFreeAllowancesConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FreeAllowances, other.FreeAllowances)) return false;
      if (RefreshSeconds != other.RefreshSeconds) return false;
      if (Threshold != other.Threshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (freeAllowances_ != null) hash ^= FreeAllowances.GetHashCode();
      if (RefreshSeconds != 0L) hash ^= RefreshSeconds.GetHashCode();
      if (Threshold != 0L) hash ^= Threshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (freeAllowances_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FreeAllowances);
      }
      if (RefreshSeconds != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RefreshSeconds);
      }
      if (Threshold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Threshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (freeAllowances_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeAllowances);
      }
      if (RefreshSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshSeconds);
      }
      if (Threshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Threshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodFeeFreeAllowancesConfig other) {
      if (other == null) {
        return;
      }
      if (other.freeAllowances_ != null) {
        if (freeAllowances_ == null) {
          FreeAllowances = new global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances();
        }
        FreeAllowances.MergeFrom(other.FreeAllowances);
      }
      if (other.RefreshSeconds != 0L) {
        RefreshSeconds = other.RefreshSeconds;
      }
      if (other.Threshold != 0L) {
        Threshold = other.Threshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (freeAllowances_ == null) {
              FreeAllowances = new global::AElf.Contracts.MultiToken.MethodFeeFreeAllowances();
            }
            input.ReadMessage(FreeAllowances);
            break;
          }
          case 16: {
            RefreshSeconds = input.ReadInt64();
            break;
          }
          case 24: {
            Threshold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodFeeFreeAllowances : pb::IMessage<MethodFeeFreeAllowances> {
    private static readonly pb::MessageParser<MethodFeeFreeAllowances> _parser = new pb::MessageParser<MethodFeeFreeAllowances>(() => new MethodFeeFreeAllowances());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodFeeFreeAllowances> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowances() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowances(MethodFeeFreeAllowances other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowances Clone() {
      return new MethodFeeFreeAllowances(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance> value_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.MethodFeeFreeAllowance> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodFeeFreeAllowances);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodFeeFreeAllowances other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodFeeFreeAllowances other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MethodFeeFreeAllowance : pb::IMessage<MethodFeeFreeAllowance> {
    private static readonly pb::MessageParser<MethodFeeFreeAllowance> _parser = new pb::MessageParser<MethodFeeFreeAllowance>(() => new MethodFeeFreeAllowance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodFeeFreeAllowance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowance(MethodFeeFreeAllowance other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodFeeFreeAllowance Clone() {
      return new MethodFeeFreeAllowance(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodFeeFreeAllowance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodFeeFreeAllowance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodFeeFreeAllowance other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFeeDelegations : pb::IMessage<TransactionFeeDelegations> {
    private static readonly pb::MessageParser<TransactionFeeDelegations> _parser = new pb::MessageParser<TransactionFeeDelegations>(() => new TransactionFeeDelegations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeDelegations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegations(TransactionFeeDelegations other) : this() {
      delegations_ = other.delegations_.Clone();
      blockHeight_ = other.blockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegations Clone() {
      return new TransactionFeeDelegations(this);
    }

    /// <summary>Field number for the "delegations" field.</summary>
    public const int DelegationsFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_delegations_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> delegations_ = new pbc::MapField<string, long>();
    /// <summary>
    /// delegation, symbols and its' amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Delegations {
      get { return delegations_; }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 2;
    private long blockHeight_;
    /// <summary>
    /// height when added
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeDelegations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeDelegations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Delegations.Equals(other.Delegations)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Delegations.GetHashCode();
      if (BlockHeight != 0L) hash ^= BlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      delegations_.WriteTo(output, _map_delegations_codec);
      if (BlockHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += delegations_.CalculateSize(_map_delegations_codec);
      if (BlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeDelegations other) {
      if (other == null) {
        return;
      }
      delegations_.Add(other.delegations_);
      if (other.BlockHeight != 0L) {
        BlockHeight = other.BlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            delegations_.AddEntriesFrom(input, _map_delegations_codec);
            break;
          }
          case 16: {
            BlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFeeDelegatees : pb::IMessage<TransactionFeeDelegatees> {
    private static readonly pb::MessageParser<TransactionFeeDelegatees> _parser = new pb::MessageParser<TransactionFeeDelegatees>(() => new TransactionFeeDelegatees());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeDelegatees> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegatees() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegatees(TransactionFeeDelegatees other) : this() {
      delegatees_ = other.delegatees_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegatees Clone() {
      return new TransactionFeeDelegatees(this);
    }

    /// <summary>Field number for the "delegatees" field.</summary>
    public const int DelegateesFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Contracts.MultiToken.TransactionFeeDelegations>.Codec _map_delegatees_codec
        = new pbc::MapField<string, global::AElf.Contracts.MultiToken.TransactionFeeDelegations>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::AElf.Contracts.MultiToken.TransactionFeeDelegations.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Contracts.MultiToken.TransactionFeeDelegations> delegatees_ = new pbc::MapField<string, global::AElf.Contracts.MultiToken.TransactionFeeDelegations>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Contracts.MultiToken.TransactionFeeDelegations> Delegatees {
      get { return delegatees_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeDelegatees);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeDelegatees other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Delegatees.Equals(other.Delegatees)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Delegatees.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      delegatees_.WriteTo(output, _map_delegatees_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += delegatees_.CalculateSize(_map_delegatees_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeDelegatees other) {
      if (other == null) {
        return;
      }
      delegatees_.Add(other.delegatees_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            delegatees_.AddEntriesFrom(input, _map_delegatees_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTransactionFeeDelegationsInput : pb::IMessage<SetTransactionFeeDelegationsInput> {
    private static readonly pb::MessageParser<SetTransactionFeeDelegationsInput> _parser = new pb::MessageParser<SetTransactionFeeDelegationsInput>(() => new SetTransactionFeeDelegationsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTransactionFeeDelegationsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsInput(SetTransactionFeeDelegationsInput other) : this() {
      delegatorAddress_ = other.delegatorAddress_ != null ? other.delegatorAddress_.Clone() : null;
      delegations_ = other.delegations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsInput Clone() {
      return new SetTransactionFeeDelegationsInput(this);
    }

    /// <summary>Field number for the "delegator_address" field.</summary>
    public const int DelegatorAddressFieldNumber = 1;
    private global::AElf.Types.Address delegatorAddress_;
    /// <summary>
    /// the delegator address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DelegatorAddress {
      get { return delegatorAddress_; }
      set {
        delegatorAddress_ = value;
      }
    }

    /// <summary>Field number for the "delegations" field.</summary>
    public const int DelegationsFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_delegations_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<string, long> delegations_ = new pbc::MapField<string, long>();
    /// <summary>
    /// delegation, symbols and its' amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Delegations {
      get { return delegations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTransactionFeeDelegationsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTransactionFeeDelegationsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DelegatorAddress, other.DelegatorAddress)) return false;
      if (!Delegations.Equals(other.Delegations)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegatorAddress_ != null) hash ^= DelegatorAddress.GetHashCode();
      hash ^= Delegations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegatorAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DelegatorAddress);
      }
      delegations_.WriteTo(output, _map_delegations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegatorAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegatorAddress);
      }
      size += delegations_.CalculateSize(_map_delegations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTransactionFeeDelegationsInput other) {
      if (other == null) {
        return;
      }
      if (other.delegatorAddress_ != null) {
        if (delegatorAddress_ == null) {
          DelegatorAddress = new global::AElf.Types.Address();
        }
        DelegatorAddress.MergeFrom(other.DelegatorAddress);
      }
      delegations_.Add(other.delegations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegatorAddress_ == null) {
              DelegatorAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DelegatorAddress);
            break;
          }
          case 18: {
            delegations_.AddEntriesFrom(input, _map_delegations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTransactionFeeDelegationsOutput : pb::IMessage<SetTransactionFeeDelegationsOutput> {
    private static readonly pb::MessageParser<SetTransactionFeeDelegationsOutput> _parser = new pb::MessageParser<SetTransactionFeeDelegationsOutput>(() => new SetTransactionFeeDelegationsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTransactionFeeDelegationsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsOutput(SetTransactionFeeDelegationsOutput other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeDelegationsOutput Clone() {
      return new SetTransactionFeeDelegationsOutput(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTransactionFeeDelegationsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTransactionFeeDelegationsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTransactionFeeDelegationsOutput other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveTransactionFeeDelegatorInput : pb::IMessage<RemoveTransactionFeeDelegatorInput> {
    private static readonly pb::MessageParser<RemoveTransactionFeeDelegatorInput> _parser = new pb::MessageParser<RemoveTransactionFeeDelegatorInput>(() => new RemoveTransactionFeeDelegatorInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTransactionFeeDelegatorInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegatorInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegatorInput(RemoveTransactionFeeDelegatorInput other) : this() {
      delegatorAddress_ = other.delegatorAddress_ != null ? other.delegatorAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegatorInput Clone() {
      return new RemoveTransactionFeeDelegatorInput(this);
    }

    /// <summary>Field number for the "delegator_address" field.</summary>
    public const int DelegatorAddressFieldNumber = 1;
    private global::AElf.Types.Address delegatorAddress_;
    /// <summary>
    /// the delegator address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DelegatorAddress {
      get { return delegatorAddress_; }
      set {
        delegatorAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTransactionFeeDelegatorInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTransactionFeeDelegatorInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DelegatorAddress, other.DelegatorAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegatorAddress_ != null) hash ^= DelegatorAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegatorAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DelegatorAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegatorAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegatorAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTransactionFeeDelegatorInput other) {
      if (other == null) {
        return;
      }
      if (other.delegatorAddress_ != null) {
        if (delegatorAddress_ == null) {
          DelegatorAddress = new global::AElf.Types.Address();
        }
        DelegatorAddress.MergeFrom(other.DelegatorAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegatorAddress_ == null) {
              DelegatorAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DelegatorAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveTransactionFeeDelegateeInput : pb::IMessage<RemoveTransactionFeeDelegateeInput> {
    private static readonly pb::MessageParser<RemoveTransactionFeeDelegateeInput> _parser = new pb::MessageParser<RemoveTransactionFeeDelegateeInput>(() => new RemoveTransactionFeeDelegateeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveTransactionFeeDelegateeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegateeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegateeInput(RemoveTransactionFeeDelegateeInput other) : this() {
      delegateeAddress_ = other.delegateeAddress_ != null ? other.delegateeAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveTransactionFeeDelegateeInput Clone() {
      return new RemoveTransactionFeeDelegateeInput(this);
    }

    /// <summary>Field number for the "delegatee_address" field.</summary>
    public const int DelegateeAddressFieldNumber = 1;
    private global::AElf.Types.Address delegateeAddress_;
    /// <summary>
    /// the delegatee address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DelegateeAddress {
      get { return delegateeAddress_; }
      set {
        delegateeAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveTransactionFeeDelegateeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveTransactionFeeDelegateeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DelegateeAddress, other.DelegateeAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegateeAddress_ != null) hash ^= DelegateeAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegateeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DelegateeAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegateeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegateeAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveTransactionFeeDelegateeInput other) {
      if (other == null) {
        return;
      }
      if (other.delegateeAddress_ != null) {
        if (delegateeAddress_ == null) {
          DelegateeAddress = new global::AElf.Types.Address();
        }
        DelegateeAddress.MergeFrom(other.DelegateeAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegateeAddress_ == null) {
              DelegateeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DelegateeAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionFeeDelegationsOfADelegateeInput : pb::IMessage<GetTransactionFeeDelegationsOfADelegateeInput> {
    private static readonly pb::MessageParser<GetTransactionFeeDelegationsOfADelegateeInput> _parser = new pb::MessageParser<GetTransactionFeeDelegationsOfADelegateeInput>(() => new GetTransactionFeeDelegationsOfADelegateeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionFeeDelegationsOfADelegateeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionFeeDelegationsOfADelegateeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionFeeDelegationsOfADelegateeInput(GetTransactionFeeDelegationsOfADelegateeInput other) : this() {
      delegateeAddress_ = other.delegateeAddress_ != null ? other.delegateeAddress_.Clone() : null;
      delegatorAddress_ = other.delegatorAddress_ != null ? other.delegatorAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionFeeDelegationsOfADelegateeInput Clone() {
      return new GetTransactionFeeDelegationsOfADelegateeInput(this);
    }

    /// <summary>Field number for the "delegatee_address" field.</summary>
    public const int DelegateeAddressFieldNumber = 1;
    private global::AElf.Types.Address delegateeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DelegateeAddress {
      get { return delegateeAddress_; }
      set {
        delegateeAddress_ = value;
      }
    }

    /// <summary>Field number for the "delegator_address" field.</summary>
    public const int DelegatorAddressFieldNumber = 2;
    private global::AElf.Types.Address delegatorAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DelegatorAddress {
      get { return delegatorAddress_; }
      set {
        delegatorAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionFeeDelegationsOfADelegateeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionFeeDelegationsOfADelegateeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DelegateeAddress, other.DelegateeAddress)) return false;
      if (!object.Equals(DelegatorAddress, other.DelegatorAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegateeAddress_ != null) hash ^= DelegateeAddress.GetHashCode();
      if (delegatorAddress_ != null) hash ^= DelegatorAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegateeAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DelegateeAddress);
      }
      if (delegatorAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DelegatorAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegateeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegateeAddress);
      }
      if (delegatorAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelegatorAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionFeeDelegationsOfADelegateeInput other) {
      if (other == null) {
        return;
      }
      if (other.delegateeAddress_ != null) {
        if (delegateeAddress_ == null) {
          DelegateeAddress = new global::AElf.Types.Address();
        }
        DelegateeAddress.MergeFrom(other.DelegateeAddress);
      }
      if (other.delegatorAddress_ != null) {
        if (delegatorAddress_ == null) {
          DelegatorAddress = new global::AElf.Types.Address();
        }
        DelegatorAddress.MergeFrom(other.DelegatorAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegateeAddress_ == null) {
              DelegateeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DelegateeAddress);
            break;
          }
          case 18: {
            if (delegatorAddress_ == null) {
              DelegatorAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(DelegatorAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transferred : pb::IMessage<Transferred> {
    private static readonly pb::MessageParser<Transferred> _parser = new pb::MessageParser<Transferred>(() => new Transferred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transferred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred(Transferred other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred Clone() {
      return new Transferred(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    /// <summary>
    /// The source address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The destination address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transferred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transferred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transferred other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Approved : pb::IMessage<Approved> {
    private static readonly pb::MessageParser<Approved> _parser = new pb::MessageParser<Approved>(() => new Approved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Approved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved(Approved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved Clone() {
      return new Approved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The address of the token owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address that allowance be increased. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of approved token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount of approved token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Approved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Approved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Approved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnApproved : pb::IMessage<UnApproved> {
    private static readonly pb::MessageParser<UnApproved> _parser = new pb::MessageParser<UnApproved>(() => new UnApproved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved(UnApproved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved Clone() {
      return new UnApproved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Types.Address owner_;
    /// <summary>
    /// The address of the token owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Types.Address spender_;
    /// <summary>
    /// The address that allowance be decreased. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of un-approved token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount of un-approved token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Burned : pb::IMessage<Burned> {
    private static readonly pb::MessageParser<Burned> _parser = new pb::MessageParser<Burned>(() => new Burned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Burned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned(Burned other) : this() {
      burner_ = other.burner_ != null ? other.burner_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned Clone() {
      return new Burned(this);
    }

    /// <summary>Field number for the "burner" field.</summary>
    public const int BurnerFieldNumber = 1;
    private global::AElf.Types.Address burner_;
    /// <summary>
    /// The address who wants to burn token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Burner {
      get { return burner_; }
      set {
        burner_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of burned token. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of burned token. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Burned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Burned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Burner, other.Burner)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (burner_ != null) hash ^= Burner.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (burner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Burner);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (burner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Burner);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Burned other) {
      if (other == null) {
        return;
      }
      if (other.burner_ != null) {
        if (burner_ == null) {
          Burner = new global::AElf.Types.Address();
        }
        Burner.MergeFrom(other.Burner);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (burner_ == null) {
              Burner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Burner);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChainPrimaryTokenSymbolSet : pb::IMessage<ChainPrimaryTokenSymbolSet> {
    private static readonly pb::MessageParser<ChainPrimaryTokenSymbolSet> _parser = new pb::MessageParser<ChainPrimaryTokenSymbolSet>(() => new ChainPrimaryTokenSymbolSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainPrimaryTokenSymbolSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet(ChainPrimaryTokenSymbolSet other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet Clone() {
      return new ChainPrimaryTokenSymbolSet(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    /// <summary>
    /// The symbol of token. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainPrimaryTokenSymbolSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainPrimaryTokenSymbolSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainPrimaryTokenSymbolSet other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculateFeeAlgorithmUpdated : pb::IMessage<CalculateFeeAlgorithmUpdated> {
    private static readonly pb::MessageParser<CalculateFeeAlgorithmUpdated> _parser = new pb::MessageParser<CalculateFeeAlgorithmUpdated>(() => new CalculateFeeAlgorithmUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateFeeAlgorithmUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeAlgorithmUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeAlgorithmUpdated(CalculateFeeAlgorithmUpdated other) : this() {
      allTypeFeeCoefficients_ = other.allTypeFeeCoefficients_ != null ? other.allTypeFeeCoefficients_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeAlgorithmUpdated Clone() {
      return new CalculateFeeAlgorithmUpdated(this);
    }

    /// <summary>Field number for the "all_type_fee_coefficients" field.</summary>
    public const int AllTypeFeeCoefficientsFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients allTypeFeeCoefficients_;
    /// <summary>
    /// All calculate fee coefficients after modification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients AllTypeFeeCoefficients {
      get { return allTypeFeeCoefficients_; }
      set {
        allTypeFeeCoefficients_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateFeeAlgorithmUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateFeeAlgorithmUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AllTypeFeeCoefficients, other.AllTypeFeeCoefficients)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (allTypeFeeCoefficients_ != null) hash ^= AllTypeFeeCoefficients.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (allTypeFeeCoefficients_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AllTypeFeeCoefficients);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (allTypeFeeCoefficients_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllTypeFeeCoefficients);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateFeeAlgorithmUpdated other) {
      if (other == null) {
        return;
      }
      if (other.allTypeFeeCoefficients_ != null) {
        if (allTypeFeeCoefficients_ == null) {
          AllTypeFeeCoefficients = new global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients();
        }
        AllTypeFeeCoefficients.MergeFrom(other.AllTypeFeeCoefficients);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (allTypeFeeCoefficients_ == null) {
              AllTypeFeeCoefficients = new global::AElf.Contracts.MultiToken.AllCalculateFeeCoefficients();
            }
            input.ReadMessage(AllTypeFeeCoefficients);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RentalCharged : pb::IMessage<RentalCharged> {
    private static readonly pb::MessageParser<RentalCharged> _parser = new pb::MessageParser<RentalCharged>(() => new RentalCharged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RentalCharged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged(RentalCharged other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged Clone() {
      return new RentalCharged(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of rental fee charged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The amount of rental fee charged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RentalCharged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RentalCharged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RentalCharged other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RentalAccountBalanceInsufficient : pb::IMessage<RentalAccountBalanceInsufficient> {
    private static readonly pb::MessageParser<RentalAccountBalanceInsufficient> _parser = new pb::MessageParser<RentalAccountBalanceInsufficient>(() => new RentalAccountBalanceInsufficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RentalAccountBalanceInsufficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient(RentalAccountBalanceInsufficient other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient Clone() {
      return new RentalAccountBalanceInsufficient(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of insufficient rental account balance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The balance of the account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RentalAccountBalanceInsufficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RentalAccountBalanceInsufficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RentalAccountBalanceInsufficient other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenCreated : pb::IMessage<TokenCreated> {
    private static readonly pb::MessageParser<TokenCreated> _parser = new pb::MessageParser<TokenCreated>(() => new TokenCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenCreated(TokenCreated other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      issueChainId_ = other.issueChainId_;
      externalInfo_ = other.externalInfo_ != null ? other.externalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenCreated Clone() {
      return new TokenCreated(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    /// <summary>
    /// The full name of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    /// <summary>
    /// The total supply of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    /// <summary>
    /// The precision of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    /// <summary>
    /// The address that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    /// <summary>
    /// A flag indicating if this token is burnable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 7;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 8;
    private global::AElf.Contracts.MultiToken.ExternalInfo externalInfo_;
    /// <summary>
    /// The external information of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.ExternalInfo ExternalInfo {
      get { return externalInfo_; }
      set {
        externalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (!object.Equals(ExternalInfo, other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (externalInfo_ != null) hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IssueChainId);
      }
      if (externalInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ExternalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (externalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenCreated other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.externalInfo_ != null) {
        if (externalInfo_ == null) {
          ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
        }
        ExternalInfo.MergeFrom(other.ExternalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 56: {
            IssueChainId = input.ReadInt32();
            break;
          }
          case 66: {
            if (externalInfo_ == null) {
              ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
            }
            input.ReadMessage(ExternalInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Issued : pb::IMessage<Issued> {
    private static readonly pb::MessageParser<Issued> _parser = new pb::MessageParser<Issued>(() => new Issued());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Issued> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issued() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issued(Issued other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issued Clone() {
      return new Issued(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of issued token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The amount of issued token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The issued target address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Issued);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Issued other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (to_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Issued other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainTransferred : pb::IMessage<CrossChainTransferred> {
    private static readonly pb::MessageParser<CrossChainTransferred> _parser = new pb::MessageParser<CrossChainTransferred>(() => new CrossChainTransferred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainTransferred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferred(CrossChainTransferred other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toChainId_ = other.toChainId_;
      issueChainId_ = other.issueChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferred Clone() {
      return new CrossChainTransferred(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    /// <summary>
    /// The source address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The destination address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_chain_id" field.</summary>
    public const int ToChainIdFieldNumber = 6;
    private int toChainId_;
    /// <summary>
    /// The destination chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToChainId {
      get { return toChainId_; }
      set {
        toChainId_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 7;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainTransferred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainTransferred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (ToChainId != other.ToChainId) return false;
      if (IssueChainId != other.IssueChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (ToChainId != 0) hash ^= ToChainId.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (ToChainId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToChainId);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IssueChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (ToChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToChainId);
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainTransferred other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.ToChainId != 0) {
        ToChainId = other.ToChainId;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
          case 48: {
            ToChainId = input.ReadInt32();
            break;
          }
          case 56: {
            IssueChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainReceived : pb::IMessage<CrossChainReceived> {
    private static readonly pb::MessageParser<CrossChainReceived> _parser = new pb::MessageParser<CrossChainReceived>(() => new CrossChainReceived());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainReceived> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceived() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceived(CrossChainReceived other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      fromChainId_ = other.fromChainId_;
      issueChainId_ = other.issueChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceived Clone() {
      return new CrossChainReceived(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    /// <summary>
    /// The source address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    /// <summary>
    /// The destination address of the transferred token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the received token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    /// <summary>
    /// The amount of the received token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 6;
    private int fromChainId_;
    /// <summary>
    /// The destination chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 7;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 8;
    private long parentChainHeight_;
    /// <summary>
    /// The parent chain height of the transfer transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainReceived);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainReceived other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (FromChainId != other.FromChainId) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (FromChainId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FromChainId);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IssueChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ParentChainHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainReceived other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
          case 48: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 56: {
            IssueChainId = input.ReadInt32();
            break;
          }
          case 64: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExternalInfoChanged : pb::IMessage<ExternalInfoChanged> {
    private static readonly pb::MessageParser<ExternalInfoChanged> _parser = new pb::MessageParser<ExternalInfoChanged>(() => new ExternalInfoChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalInfoChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfoChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfoChanged(ExternalInfoChanged other) : this() {
      symbol_ = other.symbol_;
      externalInfo_ = other.externalInfo_ != null ? other.externalInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalInfoChanged Clone() {
      return new ExternalInfoChanged(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.ExternalInfo externalInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.ExternalInfo ExternalInfo {
      get { return externalInfo_; }
      set {
        externalInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalInfoChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalInfoChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(ExternalInfo, other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (externalInfo_ != null) hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (externalInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExternalInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (externalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalInfoChanged other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.externalInfo_ != null) {
        if (externalInfo_ == null) {
          ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
        }
        ExternalInfo.MergeFrom(other.ExternalInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (externalInfo_ == null) {
              ExternalInfo = new global::AElf.Contracts.MultiToken.ExternalInfo();
            }
            input.ReadMessage(ExternalInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFeeDelegationAdded : pb::IMessage<TransactionFeeDelegationAdded> {
    private static readonly pb::MessageParser<TransactionFeeDelegationAdded> _parser = new pb::MessageParser<TransactionFeeDelegationAdded>(() => new TransactionFeeDelegationAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeDelegationAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationAdded(TransactionFeeDelegationAdded other) : this() {
      delegator_ = other.delegator_ != null ? other.delegator_.Clone() : null;
      delegatee_ = other.delegatee_ != null ? other.delegatee_.Clone() : null;
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationAdded Clone() {
      return new TransactionFeeDelegationAdded(this);
    }

    /// <summary>Field number for the "delegator" field.</summary>
    public const int DelegatorFieldNumber = 1;
    private global::AElf.Types.Address delegator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Delegator {
      get { return delegator_; }
      set {
        delegator_ = value;
      }
    }

    /// <summary>Field number for the "delegatee" field.</summary>
    public const int DelegateeFieldNumber = 2;
    private global::AElf.Types.Address delegatee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Delegatee {
      get { return delegatee_; }
      set {
        delegatee_ = value;
      }
    }

    /// <summary>Field number for the "caller" field.</summary>
    public const int CallerFieldNumber = 3;
    private global::AElf.Types.Address caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeDelegationAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeDelegationAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Delegator, other.Delegator)) return false;
      if (!object.Equals(Delegatee, other.Delegatee)) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegator_ != null) hash ^= Delegator.GetHashCode();
      if (delegatee_ != null) hash ^= Delegatee.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Delegator);
      }
      if (delegatee_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Delegatee);
      }
      if (caller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Caller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delegator);
      }
      if (delegatee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delegatee);
      }
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeDelegationAdded other) {
      if (other == null) {
        return;
      }
      if (other.delegator_ != null) {
        if (delegator_ == null) {
          Delegator = new global::AElf.Types.Address();
        }
        Delegator.MergeFrom(other.Delegator);
      }
      if (other.delegatee_ != null) {
        if (delegatee_ == null) {
          Delegatee = new global::AElf.Types.Address();
        }
        Delegatee.MergeFrom(other.Delegatee);
      }
      if (other.caller_ != null) {
        if (caller_ == null) {
          Caller = new global::AElf.Types.Address();
        }
        Caller.MergeFrom(other.Caller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegator_ == null) {
              Delegator = new global::AElf.Types.Address();
            }
            input.ReadMessage(Delegator);
            break;
          }
          case 18: {
            if (delegatee_ == null) {
              Delegatee = new global::AElf.Types.Address();
            }
            input.ReadMessage(Delegatee);
            break;
          }
          case 26: {
            if (caller_ == null) {
              Caller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Caller);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionFeeDelegationCancelled : pb::IMessage<TransactionFeeDelegationCancelled> {
    private static readonly pb::MessageParser<TransactionFeeDelegationCancelled> _parser = new pb::MessageParser<TransactionFeeDelegationCancelled>(() => new TransactionFeeDelegationCancelled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeDelegationCancelled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationCancelled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationCancelled(TransactionFeeDelegationCancelled other) : this() {
      delegator_ = other.delegator_ != null ? other.delegator_.Clone() : null;
      delegatee_ = other.delegatee_ != null ? other.delegatee_.Clone() : null;
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeDelegationCancelled Clone() {
      return new TransactionFeeDelegationCancelled(this);
    }

    /// <summary>Field number for the "delegator" field.</summary>
    public const int DelegatorFieldNumber = 1;
    private global::AElf.Types.Address delegator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Delegator {
      get { return delegator_; }
      set {
        delegator_ = value;
      }
    }

    /// <summary>Field number for the "delegatee" field.</summary>
    public const int DelegateeFieldNumber = 2;
    private global::AElf.Types.Address delegatee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Delegatee {
      get { return delegatee_; }
      set {
        delegatee_ = value;
      }
    }

    /// <summary>Field number for the "caller" field.</summary>
    public const int CallerFieldNumber = 3;
    private global::AElf.Types.Address caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeDelegationCancelled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeDelegationCancelled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Delegator, other.Delegator)) return false;
      if (!object.Equals(Delegatee, other.Delegatee)) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (delegator_ != null) hash ^= Delegator.GetHashCode();
      if (delegatee_ != null) hash ^= Delegatee.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (delegator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Delegator);
      }
      if (delegatee_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Delegatee);
      }
      if (caller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Caller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (delegator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delegator);
      }
      if (delegatee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delegatee);
      }
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeDelegationCancelled other) {
      if (other == null) {
        return;
      }
      if (other.delegator_ != null) {
        if (delegator_ == null) {
          Delegator = new global::AElf.Types.Address();
        }
        Delegator.MergeFrom(other.Delegator);
      }
      if (other.delegatee_ != null) {
        if (delegatee_ == null) {
          Delegatee = new global::AElf.Types.Address();
        }
        Delegatee.MergeFrom(other.Delegatee);
      }
      if (other.caller_ != null) {
        if (caller_ == null) {
          Caller = new global::AElf.Types.Address();
        }
        Caller.MergeFrom(other.Caller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (delegator_ == null) {
              Delegator = new global::AElf.Types.Address();
            }
            input.ReadMessage(Delegator);
            break;
          }
          case 18: {
            if (delegatee_ == null) {
              Delegatee = new global::AElf.Types.Address();
            }
            input.ReadMessage(Delegatee);
            break;
          }
          case 26: {
            if (caller_ == null) {
              Caller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Caller);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
